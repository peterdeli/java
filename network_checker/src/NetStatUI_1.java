/*
 * NetStatUI.java
 *
 * Created on January 6, 2004, 10:53 AM
 */

/**
 *
 * @author  Peter Delevoryas
 */

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import javax.swing.*;
import java.util.*;
import java.net.*;
import java.io.*;

public class NetStatUI_1 extends javax.swing.JFrame {
    
    /** Creates new form NetStatUI */
    public NetStatUI_1() {
        initComponents();
        this.setSize(600, 400);
    }
    
    public void printToLog ( String text ){
        String txt = ( text + "\n" );
        this.LogWindow.append(txt);
        this.LogWindow.setCaretPosition(this.LogWindow.getLineCount());
        
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        HeaderPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        CenterPanel = new javax.swing.JPanel();
        displayPanel = new javax.swing.JPanel();
        LocalHostButton = new javax.swing.JButton();
        LocalToGatewayLink = new javax.swing.JLabel();
        GatewayButon = new javax.swing.JButton();
        GatewayToVpnLink = new javax.swing.JLabel();
        VpnGatewayButton = new javax.swing.JButton();
        statusPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        LogWindow = new javax.swing.JTextArea();
        FooterPanel = new javax.swing.JPanel();
        Check = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("iWork NetStat Utility");
        setFont(new java.awt.Font("Dialog", 1, 12));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        HeaderPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        HeaderPanel.setMaximumSize(new java.awt.Dimension(150, 30));
        HeaderPanel.setMinimumSize(new java.awt.Dimension(150, 30));
        HeaderPanel.setPreferredSize(new java.awt.Dimension(150, 30));
        jLabel1.setText("Network Status Utility");
        HeaderPanel.add(jLabel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        getContentPane().add(HeaderPanel, gridBagConstraints);

        CenterPanel.setLayout(new java.awt.GridBagLayout());

        CenterPanel.setMinimumSize(new java.awt.Dimension(600, 250));
        CenterPanel.setPreferredSize(new java.awt.Dimension(600, 250));
        LocalHostButton.setText("LocalHost");
        displayPanel.add(LocalHostButton);

        LocalToGatewayLink.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        LocalToGatewayLink.setPreferredSize(new java.awt.Dimension(60, 10));
        LocalToGatewayLink.setOpaque(true);
        displayPanel.add(LocalToGatewayLink);

        GatewayButon.setText("Gateway");
        displayPanel.add(GatewayButon);

        GatewayToVpnLink.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        GatewayToVpnLink.setPreferredSize(new java.awt.Dimension(60, 10));
        GatewayToVpnLink.setOpaque(true);
        displayPanel.add(GatewayToVpnLink);

        VpnGatewayButton.setText("vpn Gateway");
        displayPanel.add(VpnGatewayButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        CenterPanel.add(displayPanel, gridBagConstraints);

        statusPanel.setLayout(new java.awt.BorderLayout());

        statusPanel.setMinimumSize(new java.awt.Dimension(550, 175));
        statusPanel.setPreferredSize(new java.awt.Dimension(550, 175));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(450, 800));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(450, 800));
        LogWindow.setEditable(false);
        LogWindow.setMaximumSize(new java.awt.Dimension(450, 10000000));
        LogWindow.setMinimumSize(new java.awt.Dimension(450, 10000));
        LogWindow.setPreferredSize(new java.awt.Dimension(450, 10000));
        jScrollPane1.setViewportView(LogWindow);

        statusPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
        CenterPanel.add(statusPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(CenterPanel, gridBagConstraints);

        FooterPanel.setMaximumSize(new java.awt.Dimension(400, 40));
        FooterPanel.setMinimumSize(new java.awt.Dimension(400, 40));
        FooterPanel.setPreferredSize(new java.awt.Dimension(400, 40));
        Check.setText("Check Connection");
        Check.setMaximumSize(new java.awt.Dimension(150, 25));
        Check.setMinimumSize(new java.awt.Dimension(150, 25));
        Check.setPreferredSize(new java.awt.Dimension(150, 25));
        Check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkConnection(evt);
            }
        });

        FooterPanel.add(Check);

        Cancel.setText("Cancel");
        Cancel.setMaximumSize(new java.awt.Dimension(75, 25));
        Cancel.setMinimumSize(new java.awt.Dimension(75, 25));
        Cancel.setPreferredSize(new java.awt.Dimension(75, 25));
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelNetStat(evt);
            }
        });

        FooterPanel.add(Cancel);

        jButton4.setText("Exit");
        jButton4.setMaximumSize(new java.awt.Dimension(60, 25));
        jButton4.setMinimumSize(new java.awt.Dimension(60, 25));
        jButton4.setPreferredSize(new java.awt.Dimension(60, 25));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitApp(evt);
            }
        });

        FooterPanel.add(jButton4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        getContentPane().add(FooterPanel, gridBagConstraints);

        pack();
    }//GEN-END:initComponents
    
    private void cancelNetStat(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelNetStat
        // Add your handling code here:
        
       this.Cancel.setEnabled(false);
       
        
    }//GEN-LAST:event_cancelNetStat
    
    private void ExitApp(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitApp
        // Add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_ExitApp
    private class Blink extends Thread {
        private Component c;
        boolean stopBlinking = false;
        private static final long sleepInterval = 1000;
        public Blink( Component C ){
            c=C;
        }
        
        public void stopBlinking(){
            c.setBackground(Color.green);
            c.repaint();
            stopBlinking = true;
        }
        public void run() {
            c.setBackground(Color.green);
            while ( true ){
                if ( stopBlinking == true ){
                    
                    return;
                }
                if ( c.getBackground() == Color.yellow ){
                    c.setBackground(Color.green);
                    //System.out.println( "green" );
                } else if (  c.getBackground() == Color.green ){
                    c.setBackground(Color.yellow);
                    // System.out.println( "yellow" );
                }
                c.repaint();
                try{
                    sleep(sleepInterval);
                    yield();
                }catch ( InterruptedException iex ) {
                    
                }
            }
        }
    }
    
    private class NetStatThread extends Thread {
        
        private NetStatUI ui;
        private Blink LocalHostBlink;
        private Blink GatewayLinkBlink;
        private Blink GatewayBlink;
        private Blink VpnLinkBlink;
        private Blink VpnGatewayBlink;
        private static final long sleepInterval = 5000;
        
        public NetStatThread( NetStatUI UI ){
            ui=UI;
            LocalHostBlink = new Blink( ui.LocalHostButton );
            GatewayLinkBlink = new Blink( ui.LocalToGatewayLink );
            GatewayBlink = new Blink( ui.GatewayButon );
            VpnLinkBlink = new Blink( ui.GatewayToVpnLink );
            VpnGatewayBlink = new Blink( ui.VpnGatewayButton );
            
            //start();
        }
        
        
        public void run() {
            NetStat stat = new NetStat();
            LocalHostBlink.start();
            try{
                sleep( sleepInterval );
                yield();
            } catch ( InterruptedException iex ){
                
            }
            
            System.out.println( "Checking connection .." );
            ui.printToLog("Checking connection .." );
            
            //- First, verify that the user is not already connected to the VPN/SWAN
            if ( stat.checkConnection("one.central.sun.com") == true ){
                ui.LocalHostButton.setBackground(Color.green);
                ui.LocalToGatewayLink.setBackground(Color.green);
                ui.GatewayButon.setBackground(Color.green);
                ui.GatewayToVpnLink.setBackground(Color.green);
                ui.VpnGatewayButton.setBackground(Color.green);
                System.out.println( "Connection to SWAN OK" );
                ui.printToLog("Connection to SWAN OK" );
            } else {
                
                System.out.println( "No Connection to SWAN, checking network configuration .." );
                ui.printToLog("No Connection to SWAN, checking network configuration .." );
                LocalHostBlink.stopBlinking();
                GatewayLinkBlink.start();
                try{
                    sleep( sleepInterval );
                    yield();
                } catch ( InterruptedException iex ){
                    
                }
                
                //- Computer's network interface physically up?
                parseIPConfig ipc = new parseIPConfig("/all");
                Hashtable ipcInfo = ipc.getInfo();
                // an 'up' interface will have an IP # and a gateway
                
                // get IP address and gateway
                Object lanInfoObject = ipcInfo.get( HeadingFields.LanHeading );
                // contains Hashtable pointing to vector of items
                Hashtable lanInfo = new Hashtable();
                if ( lanInfoObject instanceof Hashtable ){
                    lanInfo = (Hashtable)lanInfoObject;
                    if ( lanInfo.size() < 1 ) return;
                }
                int size = lanInfo.size();
                //"Media State . . . . . . . . . . . : Media disconnected" ??
                if ( lanInfo.containsKey( HeadingFields.MediaState ) ){
                    Vector MediaState = (Vector)lanInfo.get( HeadingFields.MediaState );
                    String state = MediaState.get(0).toString().trim();
                    if ( state.startsWith("Media disconnected") ){
                        System.out.println( "Network cable unplugged, check connections" );
                        ui.printToLog("Network cable unplugged, check connections" );
                        return;
                    }
                }
                
                Vector IPAddress = (Vector)lanInfo.get( HeadingFields.IPAddress );
                Vector DefaultGW = (Vector)lanInfo.get( HeadingFields.DefaultGateway );
                Vector NetMask = (Vector)lanInfo.get( HeadingFields.SubnetMask );
                Vector DnsServers = (Vector)lanInfo.get( HeadingFields.DNSServers );
                
                String msg = new String ( 
                 "\n" + "IP address: " + (String)IPAddress.get(0) + "\n" +
                "Default Gateway: " + (String)DefaultGW.get(0)  + "\n" +
                "Netmask: " + (String)NetMask.get(0) + "\n" );
                
                System.out.println ( msg );
                ui.printToLog(msg);
                
                String DefaultGateway = (String)DefaultGW.get(0);
                //- Connectivity to their default router (DSL/cablemodem)?
                if ( stat.Host.isAlive(DefaultGateway ) ){
                    
                    GatewayLinkBlink.stopBlinking();
                    ui.LocalToGatewayLink.setBackground(Color.green);
                    ui.GatewayButon.setBackground(Color.green);
                    
                    msg = ( "Connection to Default Gateway " + DefaultGateway + " OK" );
                    System.out.println( msg );
                    ui.printToLog(msg);
                   
                    // Check for host on network
                    
                    VpnLinkBlink.start();
                    
                    try{
                        sleep( sleepInterval );
                        yield();
                    } catch ( InterruptedException iex ){
                        
                    }
                /*
                System.out.println( "Checking ISP connection .. pinging DNS server" );
                if ( stat.Host.isAlive( (String)DnsServers.get(0) ) ){
                    System.out.println( "Ping of ISP DNS server: " + (String)DnsServers.get(0) + " is alive" );
                 
                } else {
                    System.out.println( "Ping of ISP DNS server: " + (String)DnsServers.get(0) + " not responding or host not found" );
                }
                 **/
                    msg = ( "Checking Connection to vpn server " + stat.DefaultVpnServer );
                    System.out.println ( msg );
                    ui.printToLog(msg);
                    
                    
                    boolean connectOk = false;
                    try {
                        Socket vpnSocket = new Socket( stat.DefaultVpnServer, stat.DefaultVpnPort );
                        
                        try{
                            sleep( sleepInterval );
                            yield();
                        } catch ( InterruptedException iex ){
                            
                        }
                        VpnLinkBlink.stopBlinking();
                        ui.GatewayToVpnLink.setBackground(Color.green);
                        ui.VpnGatewayButton.setBackground(Color.green);
                        msg = ( "Connectivity to " + stat.DefaultVpnServer + " OK" );
                        System.out.println( msg );
                        ui.printToLog(msg);
                        
                        connectOk = true;
                        vpnSocket.close();
                    } catch ( UnknownHostException uh  ){
                        msg = ( "No connection to " + stat.DefaultVpnServer + ": Host Unknown" );
                        System.out.println(msg);
                        ui.printToLog(msg);
                        ui.GatewayToVpnLink.setBackground(Color.red);
                        ui.VpnGatewayButton.setBackground(Color.red);
                        //uh.printStackTrace();
                        System.out.println( uh.getLocalizedMessage() );
                    } catch ( IOException iox ){
                        if ( connectOk == false ){
                            msg = ( "No connection to " + stat.DefaultVpnServer  + ": IO Exception" );
                            System.out.println(msg);
                            System.out.println( iox.getLocalizedMessage() );
                            ui.GatewayToVpnLink.setBackground(Color.red);
                            ui.VpnGatewayButton.setBackground(Color.red);
                            //iox.printStackTrace();
                        }
                    }
                    
                    
                    
                    
                    return;
                } else {
                    ui.LocalToGatewayLink.setBackground(Color.red);
                    ui.GatewayButon.setBackground(Color.red);
                    msg = ( "No Connection to Default Gateway " + DefaultGateway + "\n" + 
                    "Check connection to Default Gateway" +  "Netmask: " + (String)NetMask.get(0) );
                    System.out.println(msg);
                    ui.printToLog(msg);
                }
                
                
            }
            
            
        }
        
    }
    
    private void setColors( Color c ){
        this.LocalHostButton.setBackground(c);
        this.LocalToGatewayLink.setBackground(c);
        this.GatewayButon.setBackground(c);
        this.GatewayToVpnLink.setBackground(c);
        this.VpnGatewayButton.setBackground(c);
    }
    
    private void checkConnection(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkConnection
        // Add your handling code here:
        LogWindow.setText(null);
        setColors( Color.lightGray );
        this.LocalHostButton.setBackground(Color.green);
        this.Cancel.setEnabled(true);
        
        NetStatT = new NetStatThread(this);
        NetStatT.start();
        
    }//GEN-LAST:event_checkConnection
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new NetStatUI().show();
    }
    
    public void drawImages() {
        // create graphic images of host, gateway, vpn server
        //Graphics2D g2d = (Graphics2d) g;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton Cancel;
    protected javax.swing.JPanel CenterPanel;
    protected javax.swing.JButton Check;
    protected javax.swing.JPanel FooterPanel;
    protected javax.swing.JButton GatewayButon;
    protected javax.swing.JLabel GatewayToVpnLink;
    protected javax.swing.JPanel HeaderPanel;
    protected javax.swing.JButton LocalHostButton;
    protected javax.swing.JLabel LocalToGatewayLink;
    protected javax.swing.JTextArea LogWindow;
    protected javax.swing.JButton VpnGatewayButton;
    protected javax.swing.JPanel displayPanel;
    protected javax.swing.JButton jButton4;
    protected javax.swing.JLabel jLabel1;
    protected javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JPanel statusPanel;
    // End of variables declaration//GEN-END:variables
    protected NetStatThread NetStatT;
}
