/*
 * NetStatUI.java
 *
 * Created on January 6, 2004, 10:53 AM
 */

/**
 *
 * @author  Peter Delevoryas
 */

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import javax.swing.*;
import java.util.*;
import java.net.*;
import java.io.*;

public class NetStatUI extends javax.swing.JFrame {
    
    /** Creates new form NetStatUI */
    public NetStatUI() {
        
        try {
            PrefsFile = System.getProperty( "prefs.file" );
        } catch ( java.lang.NullPointerException np ){
            
        }
        if ( PrefsFile == null ){
            PrefsFile = new String( System.getProperty("user.home") +
            System.getProperty( "file.separator" ) + ".netcheck" );
        } else  if ( PrefsFile.length() < 1  ){
            PrefsFile = new String( System.getProperty("user.home") +
            System.getProperty( "file.separator" ) + ".netcheck" );
        }
        
        OSType = System.getProperty("os.name");
        // InterfaceHeadings = new HeadingFields( OSType );
        if ( OSType.equalsIgnoreCase("windows xp") || OSType.equalsIgnoreCase("windows 2000") ){
            // set up windows-specific structures
            
        } else if (  OSType.equalsIgnoreCase("linux")  ){
            // set up linux-specific structures
        } else if (  OSType.equalsIgnoreCase("sunos") ){
            // set up solaris-specific structures
            
        } else {
            JOptionPane.showMessageDialog(null, "This program does not run on" + OSType );
            System.exit(0);
        }
        
        SwanHosts = System.getProperty( "swan.hosts" );
        if ( SwanHosts == null ) {
            SwanHosts = "sun-ds,sun-ds.sun.com";
        }
        InternetHosts = System.getProperty( "internet.hosts" );
        if ( InternetHosts == null ) {
            InternetHosts = "http://www.yahoo.com,http://www.sun.com,http://www.ebay.com,http://www.java.com";
        }
        
        initComponents();
        setFocusObjects();
        
        this.setIconImage( this.minimizeIcon.getImage());
        //hideNetworkObjects();
        //this.setSize(650, 400);
        PrefWin = new EditPrefs( this );
        HelpWin = new NetStatHelpWin( this );
        LogWin = new NetCheckLogWin( this );
        setVisible(false);
        
        
    }
    
    public String getPrefsFile(){
        return PrefsFile;
    }
    
    public void setFocusObjects(){
        // this.Check.requestFocusInWindow();
        this.LocalHostButton.setFocusable(false);
        this.SwanButton.setFocusable(false);
        this.GatewayButton.setFocusable(false);
        this.InternetButton.setFocusable(false);
        this.VpnGatewayButton.setFocusable(false);
    }
    public void hideNetworkObjects(){
        LocalHostButton.setVisible(false);
        //   LocalToGatewayLink.setVisible(false);
        GatewayButton.setVisible(false);
        //GatewayToInternetLink.setVisible(false);
        InternetButton.setVisible(false);
        //  InternetToVpnLink.setVisible(false);
        VpnGatewayButton.setVisible(false);
        SwanButton.setVisible(false);
        displayPanel.remove(SwanButton);
        displayPanel.validate();
        
    }
    
    
    public void printToLog( String text ){
        
        System.out.println( text );
        if ( this.LogWin instanceof NetCheckLogWin ){
            this.LogWin.appendText(text + "\n");
            this.LogWin.setCaret();
            this.LogWin.invalidate();
            this.LogWin.repaint();
        }
        
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        HeaderPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        displayPanel = new javax.swing.JPanel();
        LocalHostButton = new javax.swing.JButton();
        GatewayButton = new javax.swing.JButton();
        InternetButton = new javax.swing.JButton();
        VpnGatewayButton = new javax.swing.JButton();
        SwanButton = new javax.swing.JButton();
        SwanLabel = new javax.swing.JLabel();
        HostLabel = new javax.swing.JLabel();
        GatewayLabel = new javax.swing.JLabel();
        InternetLabel = new javax.swing.JLabel();
        VPNLabel = new javax.swing.JLabel();
        FooterPanel = new javax.swing.JPanel();
        Check = new javax.swing.JButton();
        Cancel = new javax.swing.JButton();
        Prefs = new javax.swing.JButton();
        Exit = new javax.swing.JButton();
        Help = new javax.swing.JButton();
        ShowLog = new javax.swing.JButton();
        RightFillerPanel = new javax.swing.JPanel();
        LeftFillerPanel = new javax.swing.JPanel();

        setTitle("iWork NetCheck Utility");
        setBackground(new java.awt.Color(153, 153, 255));
        setFont(new java.awt.Font("Dialog", 1, 12));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        HeaderPanel.setLayout(new java.awt.BorderLayout());

        HeaderPanel.setBackground(new java.awt.Color(145, 145, 205));
        HeaderPanel.setMaximumSize(new java.awt.Dimension(200, 45));
        HeaderPanel.setMinimumSize(new java.awt.Dimension(200, 45));
        HeaderPanel.setPreferredSize(new java.awt.Dimension(200, 45));
        jLabel1.setBackground((java.awt.Color) javax.swing.UIManager.getDefaults().get("Desktop.background"));
        jLabel1.setForeground((java.awt.Color) javax.swing.UIManager.getDefaults().get("List.background"));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("icons/netstatus.png")));
        jLabel1.setText("NetCheck");
        jLabel1.setIconTextGap(8);
        jLabel1.setMaximumSize(new java.awt.Dimension(200, 75));
        jLabel1.setMinimumSize(new java.awt.Dimension(200, 75));
        jLabel1.setPreferredSize(new java.awt.Dimension(200, 75));
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        HeaderPanel.add(jLabel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(HeaderPanel, java.awt.BorderLayout.NORTH);

        displayPanel.setLayout(new java.awt.GridBagLayout());

        displayPanel.setBackground(new java.awt.Color(204, 204, 255));
        displayPanel.setBorder(new javax.swing.border.EtchedBorder());
        displayPanel.setMaximumSize(new java.awt.Dimension(250, 200));
        displayPanel.setMinimumSize(new java.awt.Dimension(250, 200));
        displayPanel.setPreferredSize(new java.awt.Dimension(500, 250));
        LocalHostButton.setBackground(new java.awt.Color(204, 204, 255));
        LocalHostButton.setFont(new java.awt.Font("Dialog", 1, 10));
        LocalHostButton.setIcon(new javax.swing.ImageIcon(""));
        LocalHostButton.setText("-");
        LocalHostButton.setToolTipText("Displays local hostname when checking a connection");
        LocalHostButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        LocalHostButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        LocalHostButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        LocalHostButton.setMaximumSize(new java.awt.Dimension(225, 35));
        LocalHostButton.setMinimumSize(new java.awt.Dimension(225, 35));
        LocalHostButton.setPreferredSize(new java.awt.Dimension(225, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        displayPanel.add(LocalHostButton, gridBagConstraints);

        GatewayButton.setBackground(new java.awt.Color(204, 204, 255));
        GatewayButton.setFont(new java.awt.Font("Dialog", 1, 10));
        GatewayButton.setIcon(new javax.swing.ImageIcon(""));
        GatewayButton.setText("-");
        GatewayButton.setToolTipText("Determines local network gateway to the internet");
        GatewayButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        GatewayButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        GatewayButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        GatewayButton.setMaximumSize(new java.awt.Dimension(225, 35));
        GatewayButton.setMinimumSize(new java.awt.Dimension(225, 35));
        GatewayButton.setPreferredSize(new java.awt.Dimension(225, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        displayPanel.add(GatewayButton, gridBagConstraints);

        InternetButton.setBackground(new java.awt.Color(204, 204, 255));
        InternetButton.setFont(new java.awt.Font("Dialog", 1, 10));
        InternetButton.setIcon(new javax.swing.ImageIcon(""));
        InternetButton.setText("-");
        InternetButton.setToolTipText("Uses internet hosts listed in 'Settings' window  for Internet connectivity check.");
        InternetButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        InternetButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        InternetButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        InternetButton.setMaximumSize(new java.awt.Dimension(225, 35));
        InternetButton.setMinimumSize(new java.awt.Dimension(225, 35));
        InternetButton.setPreferredSize(new java.awt.Dimension(225, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        displayPanel.add(InternetButton, gridBagConstraints);

        VpnGatewayButton.setBackground(new java.awt.Color(204, 204, 255));
        VpnGatewayButton.setFont(new java.awt.Font("Dialog", 1, 10));
        VpnGatewayButton.setIcon(new javax.swing.ImageIcon(""));
        VpnGatewayButton.setText("-");
        VpnGatewayButton.setToolTipText("Checks selected VPN gateway for connectivity. A selection pop-up will appear when this step is reached. Select the gateway to check.");
        VpnGatewayButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        VpnGatewayButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        VpnGatewayButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        VpnGatewayButton.setMaximumSize(new java.awt.Dimension(225, 35));
        VpnGatewayButton.setMinimumSize(new java.awt.Dimension(225, 35));
        VpnGatewayButton.setPreferredSize(new java.awt.Dimension(225, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        displayPanel.add(VpnGatewayButton, gridBagConstraints);

        SwanButton.setBackground(new java.awt.Color(204, 204, 255));
        SwanButton.setFont(new java.awt.Font("Dialog", 1, 10));
        SwanButton.setIcon(new javax.swing.ImageIcon(""));
        SwanButton.setText("-");
        SwanButton.setToolTipText("Uses Swan hosts listed in 'Settings' window  for Swan connectivity check.");
        SwanButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SwanButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SwanButton.setMaximumSize(new java.awt.Dimension(225, 35));
        SwanButton.setMinimumSize(new java.awt.Dimension(225, 35));
        SwanButton.setPreferredSize(new java.awt.Dimension(225, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        displayPanel.add(SwanButton, gridBagConstraints);

        SwanLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        SwanLabel.setIcon(new javax.swing.ImageIcon(""));
        SwanLabel.setText("SWAN Connection:");
        SwanLabel.setMaximumSize(new java.awt.Dimension(160, 35));
        SwanLabel.setMinimumSize(new java.awt.Dimension(160, 35));
        SwanLabel.setPreferredSize(new java.awt.Dimension(150, 35));
        SwanLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        displayPanel.add(SwanLabel, gridBagConstraints);

        HostLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        HostLabel.setIcon(new javax.swing.ImageIcon(""));
        HostLabel.setText("This Computer:");
        HostLabel.setMaximumSize(new java.awt.Dimension(160, 35));
        HostLabel.setMinimumSize(new java.awt.Dimension(160, 35));
        HostLabel.setPreferredSize(new java.awt.Dimension(150, 35));
        HostLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        displayPanel.add(HostLabel, gridBagConstraints);

        GatewayLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        GatewayLabel.setIcon(new javax.swing.ImageIcon(""));
        GatewayLabel.setText("Internet Gateway:");
        GatewayLabel.setMaximumSize(new java.awt.Dimension(160, 35));
        GatewayLabel.setMinimumSize(new java.awt.Dimension(160, 35));
        GatewayLabel.setPreferredSize(new java.awt.Dimension(150, 35));
        GatewayLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        displayPanel.add(GatewayLabel, gridBagConstraints);

        InternetLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        InternetLabel.setIcon(new javax.swing.ImageIcon(""));
        InternetLabel.setText("Internet Acess:");
        InternetLabel.setMaximumSize(new java.awt.Dimension(160, 35));
        InternetLabel.setMinimumSize(new java.awt.Dimension(160, 35));
        InternetLabel.setPreferredSize(new java.awt.Dimension(150, 35));
        InternetLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        displayPanel.add(InternetLabel, gridBagConstraints);

        VPNLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        VPNLabel.setIcon(new javax.swing.ImageIcon(""));
        VPNLabel.setText("VPN Gateway:");
        VPNLabel.setMaximumSize(new java.awt.Dimension(160, 35));
        VPNLabel.setMinimumSize(new java.awt.Dimension(160, 35));
        VPNLabel.setPreferredSize(new java.awt.Dimension(150, 35));
        VPNLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        displayPanel.add(VPNLabel, gridBagConstraints);

        getContentPane().add(displayPanel, java.awt.BorderLayout.CENTER);

        FooterPanel.setLayout(new java.awt.GridBagLayout());

        FooterPanel.setBackground(new java.awt.Color(145, 145, 205));
        FooterPanel.setMaximumSize(new java.awt.Dimension(400, 80));
        FooterPanel.setMinimumSize(new java.awt.Dimension(400, 80));
        FooterPanel.setPreferredSize(new java.awt.Dimension(500, 80));
        Check.setMnemonic('e');
        Check.setText("Check Connection");
        Check.setToolTipText("Begin a connectivity check");
        Check.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Check.setMaximumSize(new java.awt.Dimension(150, 25));
        Check.setMinimumSize(new java.awt.Dimension(150, 25));
        Check.setPreferredSize(new java.awt.Dimension(150, 25));
        Check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkConnection(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        FooterPanel.add(Check, gridBagConstraints);

        Cancel.setMnemonic('c');
        Cancel.setText("Cancel");
        Cancel.setToolTipText("Cancel a connectivity check");
        Cancel.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Cancel.setMaximumSize(new java.awt.Dimension(75, 25));
        Cancel.setMinimumSize(new java.awt.Dimension(75, 25));
        Cancel.setPreferredSize(new java.awt.Dimension(75, 25));
        Cancel.setEnabled(false);
        Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelNetStat(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        FooterPanel.add(Cancel, gridBagConstraints);

        Prefs.setMnemonic('s');
        Prefs.setText("Settings");
        Prefs.setToolTipText("Host settings");
        Prefs.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Prefs.setMaximumSize(new java.awt.Dimension(75, 25));
        Prefs.setMinimumSize(new java.awt.Dimension(75, 25));
        Prefs.setPreferredSize(new java.awt.Dimension(75, 25));
        Prefs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditPrefs(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        FooterPanel.add(Prefs, gridBagConstraints);

        Exit.setMnemonic('q');
        Exit.setText("Quit");
        Exit.setToolTipText("Quit");
        Exit.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Exit.setMaximumSize(new java.awt.Dimension(150, 25));
        Exit.setMinimumSize(new java.awt.Dimension(150, 25));
        Exit.setPreferredSize(new java.awt.Dimension(150, 25));
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitApp(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        FooterPanel.add(Exit, gridBagConstraints);

        Help.setMnemonic('h');
        Help.setText("Help");
        Help.setToolTipText("Show Help");
        Help.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        Help.setMaximumSize(new java.awt.Dimension(75, 25));
        Help.setMinimumSize(new java.awt.Dimension(75, 25));
        Help.setPreferredSize(new java.awt.Dimension(75, 25));
        Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Help(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        FooterPanel.add(Help, gridBagConstraints);

        ShowLog.setMnemonic('l');
        ShowLog.setText("Log");
        ShowLog.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        ShowLog.setMaximumSize(new java.awt.Dimension(75, 25));
        ShowLog.setMinimumSize(new java.awt.Dimension(75, 25));
        ShowLog.setPreferredSize(new java.awt.Dimension(75, 25));
        ShowLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showLog(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        FooterPanel.add(ShowLog, gridBagConstraints);

        getContentPane().add(FooterPanel, java.awt.BorderLayout.SOUTH);

        RightFillerPanel.setBackground(new java.awt.Color(145, 145, 205));
        getContentPane().add(RightFillerPanel, java.awt.BorderLayout.EAST);

        LeftFillerPanel.setBackground(new java.awt.Color(145, 145, 205));
        getContentPane().add(LeftFillerPanel, java.awt.BorderLayout.WEST);

        pack();
    }//GEN-END:initComponents
    
    private void showLog(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showLog
        // Add your handling code here:
        if ( this.LogWin instanceof NetCheckLogWin ){
            centerWindow(LogWin, this.getWidth(), 0);
            this.LogWin.setVisible(true);
        } else {
            LogWin = new NetCheckLogWin( this );
            centerWindow(LogWin, this.getWidth(), 0);
            this.LogWin.setVisible(true);
            
        }
    }//GEN-LAST:event_showLog
    
    private void Help(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Help
        // Add your handling code here:
        if ( HelpWin instanceof NetStatHelpWin ){
            centerWindow( HelpWin, this.getWidth(), 0 );
            HelpWin.showWin();
        } else {
            HelpWin = new NetStatHelpWin( this );
            centerWindow( HelpWin, this.getWidth(), 0 );
            HelpWin.showWin();
        }
    }//GEN-LAST:event_Help
    
    public void doHelp(java.awt.event.ActionEvent evt){
        this.Help( evt );
    }
    private void EditPrefs(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditPrefs
        // Add your handling code here:
        // Swan hosts
        // Internet hosts
        if ( PrefWin instanceof EditPrefs ) {
            centerWindow( PrefWin, this.getWidth(), 0 );
            PrefWin.setVisible(true);
        } else {
            PrefWin = new EditPrefs(this);
            centerWindow( PrefWin, this.getWidth(), 0 );
            PrefWin.setVisible(true);
        }
        
    }//GEN-LAST:event_EditPrefs
    
    private void cancelNetStat(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelNetStat
        // Add your handling code here:
        printToLog("Cancelling Network check, please wait ...");
        this.Cancel.setEnabled(false);
        this.CancelNetStat = true;
        
    }//GEN-LAST:event_cancelNetStat
    
    private void ExitApp(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitApp
        // Add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_ExitApp
    
    //// BLINK inner class //////
    
    private class Blink extends Thread {
        private Component c;
        boolean stopBlinking = false;
        private static final long sleepInterval = 600;
        private Icon icon;
        private JButton button;
        public Blink( Component C ){
            c=C;
            if ( c instanceof JButton ){
                button = (JButton)c;
                icon = button.getIcon();
            }
        }
        
        public void stopBlinking(){
           // c.setBackground(Color.green);
            c.repaint();
            stopBlinking = true;
        }
        public void run() {
            //c.setBackground(Color.green);
            try{
                sleep(sleepInterval);
                yield();
            }catch ( InterruptedException iex ) {
            }
            
            while ( true ){
                if ( stopBlinking == true ){
                    c.setVisible(true);
                    return;
                }
                /*
                if ( button instanceof JButton ){
                    if ( button.getIcon() == null ){
                        button.setIcon( icon );
                    } else {
                        button.setIcon( null );
                    }
                }
                 **/
                    
                if ( c.isVisible() ) {
                    c.setVisible(false);
                } else {
                    c.setVisible(true);
                }
                     
                /*
                if ( c.getBackground() == Color.yellow ){
                    c.setBackground(Color.green);
                    //System.out.println( "green" );
                } else if (  c.getBackground() == Color.green ){
                    c.setBackground(Color.yellow);
                    
                }
                 **/
                
                c.repaint();
                try{
                    sleep(sleepInterval);
                    yield();
                }catch ( InterruptedException iex ) {
                    
                }
            }
        }
    }
    
    
    
    class LinuxNetStatThread extends NetStatThread {
        
        public LinuxNetStatThread(NetStatUI UI) {
            super(UI);
        }
        
        public String getHostName() {
            String name = "Unknown";
            try{
                name =  java.net.InetAddress.getLocalHost().getHostName();
            } catch ( UnknownHostException uh ){
                uh.printStackTrace();
            }
            return name;
        }
        
        public Hashtable getAdapters(Hashtable configInfo) {
            Enumeration en = configInfo.keys();
            Hashtable adapters = new Hashtable();
            
            while ( en.hasMoreElements() ){
                String key = en.nextElement().toString();
                if ( key.startsWith(LinuxHeadingFields.AdapterPrefix) ){
                    Object val = configInfo.get( key );
                    if ( val instanceof Hashtable ){
                        adapters.put(key, val);
                    }
                }
            }
            return adapters;
        }
        
        public boolean hasDefaultGateway(parseRoute info) {
            Hashtable gatewayInfo = info.gatewayInfo();
            if ( gatewayInfo.size() > 0 ) return true ;
            return false;
        }
        
        public void getConfig() {
            
            // based on OS
            IFConfig = new parseIFConfig();
            ConfigInfo = IFConfig.getInfo();
            
            if ( ConfigInfo instanceof Hashtable ){
                
                if ( ConfigInfo.size() < 1 ){
                    JOptionPane.showMessageDialog(new JFrame(), "No information from IFConfig", "IF Config Error", JOptionPane.ERROR_MESSAGE );
                    this.ui.Check.setEnabled(false);
                    this.ui.Cancel.setEnabled(false);
                }
            }
            
        }
        
        public void run() {
            
            // check whether UI cancel button has been pressed //
            //System.out.println( "Checking connection .." );
            ui.printToLog("Checking connection .." );
            
            getConfig();
            if ( stopThread() )  return;
            
            //NetStat stat = new NetStat();
            //ui.LocalHostButton.setText( "Local Host: " + this.getHostName() );
            ui.LocalHostButton.setBackground(new Color( 204,204,255 ));
            ui.LocalHostButton.setVisible(true);
           // LocalHostBlink.start();
            ui.LocalHostButton.setText(getHostName());
            try{
                sleep( sleepInterval );
                yield();
            } catch ( InterruptedException iex ){
                
            }
            
            //- First, verify that the user is not already connected to the VPN/SWAN
            
          //  LocalHostBlink.stopBlinking();
            ui.LocalHostButton.setBackground(Color.green);
            SwanBlink.start();
            if ( this.checkSwan(ui.SwanButton) == true ){
                SwanBlink.stopBlinking();
                ui.LocalHostButton.setBackground(Color.green);
                /*
                ui.GatewayButton.setText("-");
                ui.InternetButton.setText("-");
                ui.VpnGatewayButton.setText("-");
                 **/
                ui.printToLog("Connection to SWAN OK" );
                if ( stopThread() )  return;
                ui.LocalHostButton.setVisible(true);
                ui.SwanButton.setFont(DefaultFont);
                ui.SwanButton.setBackground(Color.green);
                ui.SwanButton.setText(" OK ( " + this.SwanHost + " )");
                ui.displayPanel.repaint();
                
            }  else {
                SwanBlink.stopBlinking();
                
                if ( stopThread() )  return;
                try{
                    sleep( sleepInterval );
                    yield();
                } catch ( InterruptedException iex ){
                    
                }
                ui.SwanButton.setBackground(Color.yellow);
                ui.SwanButton.setText( "No Connection" );
                //System.out.println( "No Connection to SWAN, checking network configuration .." );
                ui.printToLog("No Connection to SWAN, checking network configuration .." );
                GatewayBlink.start();
                if ( stopThread() )  return;
                Hashtable adapters = getAdapters(ConfigInfo);
                if ( adapters.size() < 1 ){
                    GatewayBlink.stopBlinking();
                    String msg = "No Network Interfaces found";
                    //System.out.println(msg);
                    ui.printToLog(msg);
                    setColors(Color.yellow);
                    resetButtons();
                    return;
                }
                
                // New for Linux & Solaris - add check
                parseRoute routeInfo = new parseRoute();
                // check for gateways
                if ( ! hasDefaultGateway(routeInfo) ){
                    GatewayBlink.stopBlinking();
                    ui.GatewayButton.setVisible(true);
                    ui.GatewayButton.setBackground(Color.yellow);
                    ui.GatewayButton.setText("No Gateway");
                    String msg = new String( "No Default Gateways found!\n" +  "Check connection to Default Gateway" );
                    //System.out.println(msg);
                    ui.printToLog(msg);
                    resetButtons();
                    return;
                } else {
                    // cycle through gateways
                    Hashtable gateways = routeInfo.gatewayInfo();
                    String msg = "";
                    String DefaultGateway = "";
                    for ( Enumeration gwEnum = gateways.keys(); gwEnum.hasMoreElements(); ){
                        DefaultGateway = (String)gwEnum.nextElement();
                        if ( this.checkGateway(DefaultGateway) ){
                            GatewayBlink.stopBlinking();
                            ui.GatewayButton.setVisible(true);
                            ui.GatewayButton.setText( " " + DefaultGateway + " OK" );
                            ui.GatewayButton.setBackground(Color.green);
                            msg = ( "Connection to Default Gateway " + DefaultGateway + " OK" );
                            //System.out.println( msg );
                            ui.printToLog(msg);
                            
                            InternetBlink.start();
                            try{
                                sleep( sleepInterval );
                                yield();
                            } catch ( InterruptedException iex ){
                                
                            }
                            
                            if ( stopThread() )  return;
                            
                            msg = ( "Checking Connection to Internet"  );
                            
                            //System.out.println( msg );
                            ui.printToLog(msg);
                            
                            if ( this.checkInternet(ui.InternetButton) ){
                                InternetBlink.stopBlinking();
                                msg = ( "Connection to Internet OK"  );
                                //System.out.println( msg );
                                ui.printToLog(msg);
                                ui.InternetButton.setVisible(true);
                                ui.InternetButton.setBackground(Color.green);
                                ui.InternetButton.setText("Connection OK" );
                                ui.displayPanel.repaint();
                            } else {
                                InternetBlink.stopBlinking();
                                
                                msg = ( "No Connection to Internet"  );
                                //System.out.println( msg );
                                ui.printToLog(msg);
                                ui.InternetButton.setVisible(true);
                                ui.InternetButton.setBackground(Color.yellow);
                                ui.InternetButton.setText("No Connection" );
                                ui.displayPanel.repaint();
                                resetButtons();
                                return;
                            }
                            if ( stopThread() )  return;
                            msg = ( "Checking Connection to VPN server " );
                            VpnGatewayBlink.start();
                            //System.out.println( msg );
                            ui.printToLog(msg);
                            boolean connectOk = false;
                            if ( checkVpn() == true ){
                                VpnGatewayBlink.stopBlinking();
                                ui.VpnGatewayButton.setVisible(true);
                                ui.VpnGatewayButton.setText( this.getVpnServer() + " OK" );
                                ui.VpnGatewayButton.setBackground(Color.green);
                                ui.displayPanel.repaint();
                                msg = ( "Connectivity to VPN server OK" );
                                //System.out.println( msg );
                                ui.printToLog(msg);
                                connectOk = true;
                                if ( stopThread() )  return;
                            } else {
                                msg = ( "No connection to VPN Server"   );
                                VpnGatewayBlink.stopBlinking();
                                //System.out.println(msg);
                                ui.printToLog(msg);
                                ui.VpnGatewayButton.setVisible(true);
                                ui.VpnGatewayButton.setBackground(Color.yellow);
                                ui.VpnGatewayButton.setText("No Connection" );
                                if ( stopThread() )  return;
                            }
                            
                        } else {
                            GatewayBlink.stopBlinking();
                            msg = ( "No Connection to Default Gateway " + DefaultGateway + "\n"  );
                            //System.out.println(msg);
                            ui.printToLog(msg);
                            ui.GatewayButton.setVisible(true);
                            ui.GatewayButton.setBackground(Color.yellow);
                            ui.GatewayButton.setText("No Gateway");
                        }
                    }
                }
                
                // cycle through adapters
                for ( Enumeration adapterEnum = adapters.keys(); adapterEnum.hasMoreElements(); ){
                    if ( stopThread() )  return;
                    
                    String adapter = (String)adapterEnum.nextElement();
                    //System.out.println( "Adapter: " + adapter );
                    ui.printToLog( new String( "Adapter: " + adapter) );
                    Hashtable adapterInfo = (Hashtable)adapters.get( adapter );
                    // if more adapters here, pop up dialog to continue
                    if ( adapterEnum.hasMoreElements() ){
                        String msg = "Click on 'Yes' to check the next adapter, or 'No' to cancel checking";
                        int response = JOptionPane.showConfirmDialog(new JFrame(), msg, "Check Next Adapter?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE );
                        if ( response == JOptionPane.NO_OPTION ){
                            break;
                        } else {
                            // hide all objects and stop blinking
                            LocalHostBlink.stopBlinking();
                            SwanBlink.stopBlinking();
                            GatewayBlink.stopBlinking();
                            InternetBlink.stopBlinking();
                            VpnGatewayBlink.stopBlinking();
                            //setColors( Color.lightGray );
                            LocalHostButton.setBackground(Color.green);
                            continue;
                        }
                    }
                }
            }
            
            resetButtons();
            
        }
        
        public void resetButtons() {
            ui.Cancel.setEnabled(false);
            ui.Check.setEnabled(true);
        }
        
        public boolean stopThread() {
            boolean status = false;
            if ( ui.CancelNetStat == true ){
                ui.NetStatStopped = true;
                ui.Check.setEnabled(true);
                ui.Cancel.setEnabled(false);
                // ui.hideNetworkObjects();
                ui.printToLog("Network check cancelled.\n" );
                status = true;
            }
            return status;
        }
        
        public boolean checkInternet(JButton button) {
            
            // ping or socket connect to hosts
            //boolean canConnect = false;
            boolean hasHosts = true;
            try{
                if ( InternetHosts.length() < 1 ){
                    hasHosts = false;
                }
            } catch ( NullPointerException np ){
                hasHosts = false;
            }
            
            if ( ! hasHosts ){
                JOptionPane.showMessageDialog(null, "No Internet Hosts. Check Settings" );
                return false;
            }
            
            String msg = "";
            int successCount = 0;
            
            int maxRetries = 5;
            long sleepInterval = 10000 / maxRetries;
            String[] hosts = InternetHosts.split(",");
            
            for ( int i=0; i<hosts.length; i++ ){
                final String currentHost = hosts[i];
                button.setText("Checking " + hosts[i] );
                // set timer for each connection attempt
                class URLThread extends Thread{
                    NetStatUI.LinuxNetStatThread netstatT;
                    public URLThread( NetStatUI.LinuxNetStatThread th ){
                        netstatT = th;
                    }
                    
                    public void run(){
                        try{
                            URL InternetURL = new URL( currentHost );
                            InternetURL.openStream();
                            //System.out.println( "Connection to " + currentHost + " OK." );
                            ui.printToLog( new String( "Connection to " + currentHost + " OK." ));
                            netstatT.validHost = true;
                            return;
                            
                        } catch ( MalformedURLException mue ){
                            netstatT.validHost = false;
                            return;
                        }catch ( IOException ie ){
                            netstatT.validHost = false;
                            return;
                        }
                        
                        //System.out.println( "End of URLThread.run(), Host " + currentHost + " is validHost == " + validHost );
                        
                    }
                    public boolean isValidHost(){
                        return netstatT.validHost;
                    }
                }
                
                URLThread urlt = new URLThread(this);
                urlt.start();
                
                
                for ( int j=0; j<maxRetries; j++ ){
                    try{
                        yield();
                        sleep( sleepInterval );
                    }catch ( java.lang.InterruptedException x ){
                    }
                    if (  this.validHost ){
                        
                        msg = new String( "HTTP connectivity to " + hosts[i] +  " OK" );
                        printToLog(msg);
                        //canConnect = true;
                        successCount++;
                        urlt = null;
                        break;
                    }
                    
                    //URL InternetURL = new URL( InternetHosts[i] );
                    //InternetURL.openStream();
                }
                urlt = null;
                if (  this.validHost == false ){
                    msg = new String( "No HTTP connectivity to " + hosts[i]  );
                    printToLog(msg);
                }
                this.validHost = false;
                if ( successCount > 0 ) return true;
            }
            if ( successCount > 0 ) return true;
            return false;
            
        }
        
        public boolean checkSwan(JButton button) {
            boolean hasHosts = true;
            try{
                if ( SwanHosts.length() < 1 ){
                    hasHosts = false;
                }
            } catch ( NullPointerException np ){
                hasHosts = false;
            }
            
            if ( ! hasHosts ){
               JOptionPane.showMessageDialog(null, "No Swan Hosts. Check Settings" );
               return false;
            }
            String[] hosts = SwanHosts.split(",");
            
            for ( int i=0; i<hosts.length; i++ ){
                button.setText( "Checking " + hosts[i] + " .."  );
                System.out.println( "Checking host " + hosts[i] );
                LinuxPing swanHost = new LinuxPing();
                if ( swanHost.isAlive( hosts[i] ) ){
                    this.SwanHost = hosts[i];
                    return true;
                }
            }
            return false;
        }
        
        
        public boolean checkGateway(String gw) {
            LinuxPing host = new LinuxPing();
            if ( host.isAlive(gw) )return true;
            return false;
        }
        
        public boolean checkLocalHost() {
            return true;
        }
        
        public boolean checkConnection(String type) {
            return true;
        }
        //private String VpnServer = "";
    }
    
    
    ///// SOLARIS THREAD /////////
    
    class SolarisNetStatThread extends NetStatThread {
        
        protected parseSolarisIFConfig IFConfig;
        //private String VpnServer = "";
        
        public String getHostName() {
            String name = "Unknown";
            try{
                name =  java.net.InetAddress.getLocalHost().getHostName();
            } catch ( UnknownHostException uh ){
                uh.printStackTrace();
            }
            return name;
        }
        
        public SolarisNetStatThread(NetStatUI UI) {
            super(UI);
            
        }
        
        public Hashtable getAdapters(Hashtable configInfo) {
            Enumeration en = configInfo.keys();
            Hashtable adapters = new Hashtable();
            while ( en.hasMoreElements() ){
                String key = en.nextElement().toString();
                Object val = configInfo.get( key );
                if ( val instanceof Hashtable ){
                    adapters.put(key, val);
                }
            }
            return adapters;
        }
        
        public void getConfig() {
            IFConfig = new parseSolarisIFConfig();
            ConfigInfo = IFConfig.getInfo();
            if ( ConfigInfo instanceof Hashtable ){
                if ( ConfigInfo.size() < 1 ){
                    JOptionPane.showMessageDialog(new JFrame(), "No information from IFConfig", "IF Config Error", JOptionPane.ERROR_MESSAGE );
                    this.ui.Check.setEnabled(false);
                    this.ui.Cancel.setEnabled(false);
                }
            }
        }
        
        public void resetButtons() {
            ui.Cancel.setEnabled(false);
            ui.Check.setEnabled(true);
        }
        
        public boolean stopThread() {
            boolean status = false;
            if ( ui.CancelNetStat == true ){
                ui.NetStatStopped = true;
                ui.Check.setEnabled(true);
                ui.Cancel.setEnabled(false);
                //ui.hideNetworkObjects();
                ui.printToLog("Network check cancelled.\n" );
                status = true;
            }
            return status;
        }
        
        public boolean checkInternet(JButton button) {
            // ping or socket connect to hosts
            //boolean canConnect = false;
            boolean hasHosts = true;
            try{
                if ( InternetHosts.length() < 1 ){
                    hasHosts = false;
                }
            } catch ( NullPointerException np ){
                hasHosts = false;
            }
            
            if ( ! hasHosts ){
                JOptionPane.showMessageDialog(null, "No Internet Hosts. Check Settings" );
                return false;
            }
            String msg = "";
            int successCount = 0;
            
            int maxRetries = 5;
            long sleepInterval = 10000 / maxRetries;
            String[] hosts = InternetHosts.split(",");
            
            for ( int i=0; i<hosts.length; i++ ){
                final String currentHost = hosts[i];
                button.setText("Checking " + hosts[i] );
                // set timer for each connection attempt
                class URLThread extends Thread{
                    NetStatUI.SolarisNetStatThread netstatT;
                    public URLThread( NetStatUI.SolarisNetStatThread th ){
                        netstatT = th;
                    }
                    
                    public void run(){
                        
                        try{
                            URL InternetURL = new URL( currentHost );
                            InternetURL.openStream();
                            System.out.println( "Connection to " + currentHost + " OK." );
                            netstatT.validHost = true;
                            return;
                            
                        } catch ( MalformedURLException mue ){
                            netstatT.validHost = false;
                            return;
                        }catch ( IOException ie ){
                            netstatT.validHost = false;
                            return;
                        }
                        
                        //System.out.println( "End of URLThread.run(), Host " + currentHost + " is validHost == " + validHost );
                        
                    }
                    public boolean isValidHost(){
                        return netstatT.validHost;
                    }
                }
                
                URLThread urlt = new URLThread(this);
                urlt.start();
                
                for ( int j=0; j<maxRetries; j++ ){
                    try{
                        yield();
                        sleep( sleepInterval );
                    }catch ( java.lang.InterruptedException x ){
                    }
                    if (  this.validHost ){
                        
                        msg = new String( "HTTP connectivity to " + hosts[i] +  " OK" );
                        printToLog(msg);
                        //canConnect = true;
                        successCount++;
                        urlt = null;
                        break;
                    }
                    
                    //URL InternetURL = new URL( InternetHosts[i] );
                    //InternetURL.openStream();
                }
                urlt = null;
                if (  this.validHost == false ){
                    msg = new String( "No HTTP connectivity to " + hosts[i]  );
                    printToLog(msg);
                }
                this.validHost = false;
            }
            if ( successCount > 0 ) return true;
            return false;
            
        }
        
        public boolean checkSwan(JButton button) {
            // Solaris
            boolean hasHosts = true;
            try{
                if ( SwanHosts.length() < 1 ){
                    hasHosts = false;
                }
            } catch ( NullPointerException np ){
                hasHosts = false;
            }
            
            if ( ! hasHosts ){
               JOptionPane.showMessageDialog(null, "No Swan Hosts. Check Settings" );
               return false;
            }
            String[] hosts = SwanHosts.split(",");
            for ( int i=0; i<hosts.length; i++ ){
                button.setText( "Checking " + hosts[i] + " .."  );
                System.out.println( "Checking host " + hosts[i] );
                SolarisPing swanHost = new SolarisPing();
                if ( swanHost.isAlive( hosts[i] ) ){
                    this.SwanHost = hosts[i];
                    return true;
                }
            }
            return false;
        }
        
        public boolean checkGateway(String gw) {
            SolarisPing host = new SolarisPing();
            if ( host.isAlive(gw) )return true;
            return false;
        }
        
        public boolean checkLocalHost() {
            
            return true;
            
        }
        
        public boolean checkConnection(String type) {
            return true;
        }
        
        public void run() {
            
            // check whether UI cancel button has been pressed //
            LocalHostBlink.start();
            //System.out.println( "Checking connection .." );
            ui.printToLog("Checking connection .." );
            getConfig();
            LocalHostBlink.stopBlinking();
            if ( stopThread() )  return;
            ui.LocalHostButton.setText(getHostName());
            try{
                sleep( sleepInterval );
                yield();
            } catch ( InterruptedException iex ){
                
            }
            ui.LocalHostButton.setBackground(Color.green);
            SwanBlink.start();
            //- First, verify that the user is not already connected to the VPN/SWAN
            if ( this.checkSwan(ui.SwanButton) == true ){
                SwanBlink.stopBlinking();
                if ( stopThread() )  return;
                
                /*
                ui.GatewayButton.setText("-");
                ui.InternetButton.setText("-");
                ui.VpnGatewayButton.setText("-");
                 **/
                ui.printToLog("Connection to SWAN OK" );
                //ui.SwanButton.setFont(DefaultFont);
                ui.SwanButton.setBackground(Color.green);
                ui.SwanButton.setText("OK ( " + this.SwanHost + " )");
                
            }  else {
                SwanBlink.stopBlinking();
                //////////////// MAIN SECTION WHERE MOST CONNECTIVITY IS CHECKED ////////////////
                
                if ( stopThread() )  return;
                ui.SwanButton.setBackground(Color.yellow);
                ui.SwanButton.setText( "No Connection" );
                //System.out.println( "No Connection to SWAN, checking network configuration .." );
                ui.printToLog("No Connection to SWAN, checking network configuration .." );
                
                GatewayBlink.start();
                
                try{
                    sleep( sleepInterval );
                    yield();
                } catch ( InterruptedException iex ){
                    
                }
                if ( stopThread() )  return;
                
                Hashtable adapters = getAdapters(ConfigInfo);
                
                if ( adapters.size() < 1 ){
                    String msg = "No Network Interfaces found";
                    //System.out.println(msg);
                    ui.printToLog(msg);
                    setColors(Color.yellow);
                    resetButtons();
                    return;
                }
                
                String msg = "";
                
                for ( Enumeration adapterEnum = adapters.keys(); adapterEnum.hasMoreElements(); ){
                    if ( stopThread() )  return;
                    String adapter = (String)adapterEnum.nextElement();
                    msg = new String( "Adapter: " + adapter );
                    ui.printToLog(msg);
                    Hashtable adapterInfo = (Hashtable)adapters.get( adapter );
                    // if more adapters here, pop up dialog to continue
                    // New for Linux & Solaris - add check
                    parseSolarisRoute routeInfo = new parseSolarisRoute();
                    // check for gateways
                    if ( ! hasDefaultGateway(routeInfo) ){
                        GatewayBlink.stopBlinking();
                        ui.GatewayButton.setVisible(true);
                        ui.GatewayButton.setBackground(Color.yellow);
                        msg = new String( "No Default Gateways found!\n" +  "Check connection to Default Gateway" );
                        //System.out.println(msg);
                        ui.printToLog(msg);
                        resetButtons();
                        return;
                    }
                    
                    // cycle through gateways
                    Hashtable gateways = routeInfo.gatewayInfo();
                    
                    String DefaultGateway = "";
                    for ( Enumeration gwEnum = gateways.keys(); gwEnum.hasMoreElements(); ){
                        DefaultGateway = (String)gwEnum.nextElement();
                        if ( this.checkGateway(DefaultGateway) ){
                            
                            GatewayBlink.stopBlinking();
                            ui.GatewayButton.setVisible(true);
                            ui.GatewayButton.setText( DefaultGateway );
                            ui.GatewayButton.setBackground(Color.green);
                            
                            msg = ( "Connection to Default Gateway " + DefaultGateway + " OK" );
                            //System.out.println( msg );
                            ui.printToLog(msg);
                            
                            // Check for host on network
                            try{
                                sleep( sleepInterval );
                                yield();
                            } catch ( InterruptedException iex ){
                                
                            }
                            if ( stopThread() )  return;
                            msg = ( "Checking Connection to Internet"  );
                            InternetBlink.start();
                            //System.out.println( msg );
                            ui.printToLog(msg);
                            
                            if ( this.checkInternet(ui.InternetButton) ){
                                InternetBlink.stopBlinking();
                                msg = ( "Connection to Internet OK"  );
                                //System.out.println( msg );
                                ui.printToLog(msg);
                                ui.InternetButton.setVisible(true);
                                ui.InternetButton.setBackground(Color.green);
                                ui.InternetButton.setText("Connection OK" );
                                ui.displayPanel.repaint();
                            } else {
                                
                                msg = ( "No Connection to Internet"  );
                                //System.out.println( msg );
                                ui.printToLog(msg);
                                InternetBlink.stopBlinking();
                                ui.InternetButton.setVisible(true);
                                ui.InternetButton.setBackground(Color.yellow);
                                ui.InternetButton.setText("No Connection" );
                                ui.displayPanel.repaint();
                                resetButtons();
                                return;
                            }
                            
                            if ( stopThread() )  return;
                            
                            msg = ( "Checking Connection to VPN server " );
                            VpnGatewayBlink.start();
                            //System.out.println( msg );
                            ui.printToLog(msg);
                            boolean connectOk = false;
                            if ( checkVpn() == true ){
                                VpnGatewayBlink.stopBlinking();
                                ui.VpnGatewayButton.setVisible(true);
                                ui.VpnGatewayButton.setText( getVpnServer() + " OK" );
                                ui.VpnGatewayButton.setBackground(Color.green);
                                ui.displayPanel.repaint();
                                msg = ( "Connectivity to VPN server OK" );
                                //System.out.println( msg );
                                ui.printToLog(msg);
                                connectOk = true;
                                if ( stopThread() )  return;
                            } else {
                                msg = ( "No connection to VPN Server"   );
                                VpnGatewayBlink.stopBlinking();
                                //System.out.println(msg);
                                ui.printToLog(msg);
                                ui.VpnGatewayButton.setVisible(true);
                                ui.VpnGatewayButton.setBackground(Color.yellow);
                                if ( stopThread() )  return;
                            }
                            
                        } else {
                            GatewayBlink.stopBlinking();
                            msg = ( "No Connection to Default Gateway " + DefaultGateway + "\n"  );
                            //System.out.println(msg);
                            ui.printToLog(msg);
                            
                            ui.GatewayButton.setVisible(true);
                            ui.GatewayButton.setBackground(Color.yellow);
                            ui.GatewayButton.setText("No Gateway");
                            // }
                        }
                        if ( adapterEnum.hasMoreElements() ){
                            msg = "Click on 'Yes' to check the next adapter, or 'No' to cancel checking";
                            int response = JOptionPane.showConfirmDialog(new JFrame(), msg, "Check Next Adapter?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE );
                            if ( response == JOptionPane.NO_OPTION ){
                                break;
                            } else {
                                LocalHostBlink.stopBlinking();
                                GatewayBlink.stopBlinking();
                                InternetBlink.stopBlinking();
                                VpnGatewayBlink.stopBlinking();
                                //setColors( Color.lightGray );
                                LocalHostButton.setBackground(Color.green);
                                continue;
                            }
                        }
                    }
                }
            }
            resetButtons();
        }
        
        public String getVpnServer() {
            return this.VpnServer;
        }
        
        public boolean hasDefaultGateway(parseSolarisRoute info) {
            Hashtable gatewayInfo = info.gatewayInfo();
            if ( gatewayInfo.size() > 0 ) return true ;
            return false;
        }
        
        public void setVpnServer(String name) {
        }
        
    }
    
    public interface NetStatThreadInterface  {
        
        public boolean checkConnection(String type);
        
        public boolean checkGateway(String gw);
        
        public boolean checkInternet();
        
        public boolean checkLocalHost();
        
        public boolean checkSwan();
        
        public boolean checkVpn();
        
        public String getVpnServer();
        
        public Hashtable getAdapters(Hashtable configInfo);
        
        public void getConfig();
        
        public String getHostName(Hashtable configInfo);
        
        public boolean hasDefaultGateway(Hashtable adapter);
        
        public void resetButtons();
        
        public void run();
        
        public boolean stopThread();
      }
    
    class WinNetStatThread extends NetStatThread {
        
        //private String vpnServer = "N/A";
        
        public WinNetStatThread( NetStatUI UI){
            super(UI);
        }
        
        public boolean checkConnection(String type) {
            return true;
        }
        
        public boolean checkGateway(String gw) {
            WinPing host = new WinPing();
            if ( host.isAlive(gw) )return true;
            return false;
        }
        
        public boolean checkInternet(JButton button) {
            // ping or socket connect to hosts
            //boolean canConnect = false;
            boolean hasHosts = true;
            try{
                if ( InternetHosts.length() < 1 ){
                    hasHosts = false;
                }
            } catch ( NullPointerException np ){
                hasHosts = false;
            }
            
            if ( ! hasHosts ){
                JOptionPane.showMessageDialog(null, "No Internet Hosts. Check Settings" );
                return false;
            }
            String msg = "";
            int successCount = 0;
            
            int maxRetries = 5;
            long sleepInterval = 10000 / maxRetries;
            String[] hosts = InternetHosts.split(",");
            
            for ( int i=0; i<hosts.length; i++ ){
                final String currentHost = hosts[i];
                button.setText("Checking " + hosts[i] );
                // set timer for each connection attempt
                class URLThread extends Thread{
                    NetStatUI.NetStatThread netstatT;
                    public URLThread( NetStatUI.NetStatThread th ){
                        netstatT = th;
                    }
                    
                    public void run(){
                        
                        try{
                            URL InternetURL = new URL( currentHost );
                            InternetURL.openStream();
                            System.out.println( "Connection to " + currentHost + " OK." );
                            netstatT.validHost = true;
                            return;
                            
                        } catch ( MalformedURLException mue ){
                            netstatT.validHost = false;
                            return;
                        }catch ( IOException ie ){
                            netstatT.validHost = false;
                            return;
                        }
                        
                        //System.out.println( "End of URLThread.run(), Host " + currentHost + " is validHost == " + validHost );
                        
                    }
                    public boolean isValidHost(){
                        return netstatT.validHost;
                    }
                }
                
                URLThread urlt = new URLThread(this);
                urlt.start();
                
                for ( int j=0; j<maxRetries; j++ ){
                    try{
                        yield();
                        sleep( sleepInterval );
                    }catch ( java.lang.InterruptedException x ){
                    }
                    if (  this.validHost ){
                        
                        msg = new String( "HTTP connectivity to " + hosts[i] +  " OK" );
                        printToLog(msg);
                        //canConnect = true;
                        successCount++;
                        urlt = null;
                        break;
                    }
                    
                }
                urlt = null;
                if (  this.validHost == false ){
                    msg = new String( "No HTTP connectivity to " + hosts[i]  );
                    printToLog(msg);
                }
                this.validHost = false;
            }
            if ( successCount > 0 ) return true;
            return false;
            
        }
        
        public boolean checkLocalHost() {
            
            return true;
            
        }
        
        public boolean checkSwan(JButton button) {
            // Windows
            boolean hasHosts = true;
            try{
                if ( SwanHosts.length() < 1 ){
                    hasHosts = false;
                }
            } catch ( NullPointerException np ){
                hasHosts = false;
            }
            
            if ( ! hasHosts ){
                JOptionPane.showMessageDialog(null, "No Swan Hosts. Check Settings" );
                return false;
            }
            String[] hosts = SwanHosts.split(",");
            for ( int i=0; i<hosts.length; i++ ){
                button.setText( "Checking " + hosts[i] + " .."  );
                System.out.println( "Checking host " + hosts[i] );
                WinPing swanHost = new WinPing();
                if ( swanHost.isAlive( hosts[i] ) ){
                    this.SwanHost = hosts[i];
                    return true;
                }
            }
            return false;
        }
        
        
        public Hashtable getAdapters(Hashtable configInfo) {
            Enumeration en = configInfo.keys();
            Hashtable adapters = new Hashtable();
            
            while ( en.hasMoreElements() ){
                String key = en.nextElement().toString();
                if ( key.startsWith(HeadingFields.LanPrefix) ){
                    Object val = configInfo.get( key );
                    if ( val instanceof Hashtable ){
                        adapters.put(key, val);
                    }
                }
            }
            return adapters;
        }
        
        public void getConfig() {
            
            // based on OS
            if ( this.ui.OSType.startsWith("Windows") ){
                IPConfig = new parseIPConfig("/all");
                ConfigInfo = IPConfig.getInfo();
                // an 'up' interface will have an IP # and a gateway
                // get IP address and gateway
                // get Adapters
                LanInfoObject = ConfigInfo.get( WinHeadingFields.LanHeading );
                // contains Hashtable pointing to vector of items
                LanInfo = new Hashtable();
                if ( LanInfoObject instanceof Hashtable ){
                    LanInfo = (Hashtable)LanInfoObject;
                    if ( LanInfo.size() < 1 ){
                        JOptionPane.showMessageDialog(new JFrame(), "No information from IPConfig", "IP Config Error", JOptionPane.ERROR_MESSAGE );
                        ui.Check.setEnabled(false);
                        ui.Cancel.setEnabled(false);
                    }
                }
            } else if ( this.ui.OSType.equalsIgnoreCase("linux" ) ){
                
            } else if (  this.ui.OSType.equalsIgnoreCase( "sunos" )){
                
            } else {
                System.out.println( "Cannot work with Operating System " + this.ui.OSType );
                return;
            }
            
            
        }
        
        public String getHostName(Hashtable configInfo) {
            Enumeration en = configInfo.keys();
            Hashtable hostnames = new Hashtable();
            String hostname = "";
            while ( en.hasMoreElements() ){
                String key = en.nextElement().toString();
                if ( key.startsWith( WinHeadingFields.WinHeading ) ){
                    Object val = configInfo.get( key );
                    if ( val instanceof Hashtable ){
                        Hashtable h = (Hashtable)val;
                        Object subval = h.get( WinHeadingFields.HostName );
                        if ( subval instanceof Vector){
                            Vector v = (Vector)subval;
                            hostname = (String)v.get(0);
                        }
                    }
                }
            }
            if ( hostname.length() < 1 ) hostname = "LocalHost";
            return hostname;
        }
        
        public boolean hasDefaultGateway(Hashtable adapter) {
            // key points to hashtable of info
            if ( adapter.size() < 1 ){
                return false;
            }
            // get hashtable
            if ( adapter.containsKey(HeadingFields.DefaultGateway ) ){
                Vector gw = (Vector)adapter.get( HeadingFields.DefaultGateway );
                if ( gw.size() < 1 || gw == null ) return false;
                return true;
            }
            return false;
        }
        
        public void resetButtons() {
            ui.Cancel.setEnabled(false);
            ui.Check.setEnabled(true);
        }
        
        public void run() {
            
            // check whether UI cancel button has been pressed //
            //System.out.println( "Checking connection .." );
            ui.printToLog("Checking connection .." );
            LocalHostBlink.start();
            getConfig();
            if ( stopThread() )  return;
            //NetStat stat = new NetStat();
            ui.LocalHostButton.setText( this.getHostName(ConfigInfo) );
            ui.LocalHostButton.setVisible(true);
            LocalHostBlink.stopBlinking();
            ui.LocalHostButton.setBackground(Color.green);
            
            SwanBlink.start();
            try{
                sleep( sleepInterval );
                yield();
            } catch ( InterruptedException iex ){
                
            }
            if ( this.checkSwan(ui.SwanButton) == true ){
                // Windows
                SwanBlink.stopBlinking();
                if ( stopThread() )  return;
             
                ui.printToLog("Connection to SWAN OK" );
                ui.SwanButton.setVisible(true);
                ui.SwanButton.setBackground(Color.green);
                ui.SwanButton.setText(this.SwanHost);
                ui.SwanButton.setFont(DefaultFont);
                ui.displayPanel.repaint();
                
            }  else {
                SwanBlink.stopBlinking();
                if ( stopThread() )  return;
                //System.out.println( "No Connection to SWAN, checking network configuration .." );
                ui.printToLog("No Connection to SWAN, checking network configuration .." );
                LocalHostBlink.stopBlinking();
                ui.SwanButton.setBackground(Color.yellow);
                ui.SwanButton.setText("No Connection");
                this.GatewayBlink.start();
                try{
                    
                    sleep( sleepInterval );
                    yield();
                } catch ( InterruptedException iex ){
                    
                }
                
                if ( stopThread() )  return;
                
                Hashtable adapters = getAdapters(ConfigInfo);
                if ( adapters.size() < 1 ){
                    String msg = "No Network Interfaces found";
                    //System.out.println(msg);
                    ui.printToLog(msg);
                    
                    setColors(Color.yellow);
                    resetButtons();
                    return;
                }
                
                // check for gateways
                Enumeration adapterenum = adapters.keys();
                Hashtable gatewayAdapters = new Hashtable();
                while ( adapterenum.hasMoreElements() ){
                    String key = (String)adapterenum.nextElement();
                    Hashtable adapterInfo = (Hashtable)adapters.get(key);
                    if ( hasDefaultGateway(adapterInfo) ){
                        gatewayAdapters.put(key, adapterInfo);
                    }
                }
                
                if ( gatewayAdapters.size() < 1 ){
                    this.GatewayBlink.stopBlinking();
                    ui.GatewayButton.setVisible(true);
                    ui.GatewayButton.setBackground(Color.yellow);
                    ui.GatewayButton.setText("No Default Gateway" );
                    String msg = new String( "No Default Gateways found!\n" +  "Check connection to Default Gateway" );
                    //System.out.println(msg);
                    ui.printToLog(msg);
                    resetButtons();
                    return;
                }
                
                // cycle through adapters
                adapterenum =  gatewayAdapters.keys();
                
                while ( adapterenum.hasMoreElements() ){
                    
                    if ( stopThread() )  return;
                    
                    String adapter = (String)adapterenum.nextElement();
                    System.out.println( "Adapter: " + adapter );
                    Hashtable adapterInfo = (Hashtable)gatewayAdapters.get( adapter );
                    
                    Vector IPAddress = (Vector)adapterInfo.get( WinHeadingFields.IPAddress );
                    Vector DefaultGW = (Vector)adapterInfo.get( WinHeadingFields.DefaultGateway );
                    Vector NetMask = (Vector)adapterInfo.get( WinHeadingFields.SubnetMask );
                    Vector DnsServers = (Vector)adapterInfo.get( WinHeadingFields.DNSServers );
                    
                    String msg = new String(
                    "\n" + "IP address: " + (String)IPAddress.get(0) + "\n" +
                    "Default Gateway: " + (String)DefaultGW.get(0)  + "\n" +
                    "Netmask: " + (String)NetMask.get(0) + "\n" );
                    
                    //System.out.println( msg );
                    ui.printToLog(msg);
                    
                    String DefaultGateway = (String)DefaultGW.get(0);
                    //- Connectivity to their default router (DSL/cablemodem)?
                    
                    if ( this.checkGateway(DefaultGateway ) ){
                        this.GatewayBlink.stopBlinking();
                        ui.GatewayButton.setVisible(true);
                        ui.GatewayButton.setBackground(Color.green);
                        ui.GatewayButton.setText( DefaultGateway );
                        msg = ( "Connection to Default Gateway " + DefaultGateway + " OK" );
                        //System.out.println( msg );
                        ui.printToLog(msg);
                        this.InternetBlink.start();
                        try{
                            sleep( sleepInterval );
                            yield();
                        } catch ( InterruptedException iex ){
                            
                        }
                        if ( stopThread() )  return;
                        
                        msg = ( "Checking Connection to Internet"  );
                        //System.out.println( msg );
                        ui.printToLog(msg);
                        
                        if ( this.checkInternet(ui.InternetButton) ){
                            msg = ( "Connection to Internet OK"  );
                            
                            this.InternetBlink.stopBlinking();
                            //System.out.println( msg );
                            ui.printToLog(msg);
                            
                            ui.InternetButton.setVisible(true);
                            ui.InternetButton.setBackground(Color.green);
                            ui.InternetButton.setText("Connection OK" );
                            ui.displayPanel.repaint();
                            this.VpnGatewayBlink.start();
                        } else {
                            this.InternetBlink.stopBlinking();
                            msg = ( "No Connection to Internet"  );
                            //System.out.println( msg );
                            ui.printToLog(msg);
                            ui.InternetButton.setText("No Connection" );
                            ui.InternetButton.setBackground(Color.yellow);
                            ui.displayPanel.repaint();
                            resetButtons();
                            return;
                        }
                        
                        if ( stopThread() )  return;
                        
                        
                        msg = ( "Checking Connection to VPN server " );
                        //System.out.println( msg );
                        ui.printToLog(msg);
                        boolean connectOk = false;
                        if ( checkVpn() == true ){
                            this.VpnGatewayBlink.stopBlinking();
                            ui.VpnGatewayButton.setVisible(true);
                            ui.VpnGatewayButton.setBackground(Color.green);
                            ui.VpnGatewayButton.setText(this.VpnServer + " OK");
                            ui.displayPanel.repaint();
                            msg = ( "Connectivity to VPN server OK" );
                            //System.out.println( msg );
                            ui.printToLog(msg);
                            connectOk = true;
                            if ( stopThread() )  return;
                        } else {
                            msg = ( "No connection to VPN Server"   );
                            this.VpnGatewayBlink.stopBlinking();
                            //System.out.println(msg);
                            ui.printToLog(msg);
                            ui.VpnGatewayButton.setVisible(true);
                            ui.VpnGatewayButton.setText("No Connection: " + this.VpnServer);
                            ui.VpnGatewayButton.setBackground(Color.yellow);
                            if ( stopThread() )  return;
                        }
                        
                    } else {
                        
                        msg = ( "No Connection to Default Gateway " + DefaultGateway + "\n" +
                        "Check connection to Default Gateway. " +  "Netmask: " + (String)NetMask.get(0) );
                        //System.out.println(msg);
                        ui.GatewayButton.setText("No Gateway");
                        ui.printToLog(msg);
                        if ( adapterenum.hasMoreElements() ){
                            continue;
                        } else {
                            ui.GatewayButton.setVisible(true);
                            ui.GatewayButton.setBackground(Color.yellow);
                        }
                    }
                    
                    
                    // if more adapters here, pop up dialog to continue
                    if ( adapterenum.hasMoreElements() ){
                        msg = "Click on 'Yes' to check the next adapter, or 'No' to cancel checking";
                        int response = JOptionPane.showConfirmDialog(new JFrame(), msg, "Check Next Adapter?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE );
                        if ( response == JOptionPane.NO_OPTION ){
                            break;
                        } else {
                            // hide all objects and stop blinking
                            LocalHostBlink.stopBlinking();
                            GatewayBlink.stopBlinking();
                            InternetBlink.stopBlinking();
                            VpnGatewayBlink.stopBlinking();
                            setColors( (java.awt.Color) javax.swing.UIManager.getDefaults().get("Button.focus") );
                            LocalHostButton.setBackground(Color.green);
                            //hideNetworkObjects();
                            continue;
                        }
                    }
                }
            }
            resetButtons();
            
        }
        
        public boolean stopThread() {
            boolean status = false;
            if ( ui.CancelNetStat == true ){
                ui.NetStatStopped = true;
                ui.Check.setEnabled(true);
                ui.Cancel.setEnabled(false);
                // ui.hideNetworkObjects();
                ui.printToLog("Network check cancelled.\n" );
                status = true;
            }
            return status;
        }
        
    }
    
    class NetStatThread extends Thread implements NetStatThreadInterface {
        
        public NetStatUI ui;
        protected Blink LocalHostBlink;
        protected Blink GatewayBlink;
        protected Blink InternetBlink;
        protected Blink VpnGatewayBlink;
        protected Blink SwanBlink;
        protected static final long sleepInterval = 1000;
        protected parseIPConfig IPConfig;
        protected parseIFConfig IFConfig;
        protected Hashtable ConfigInfo;
        protected Object LanInfoObject;
        protected Hashtable LanInfo;
        protected String DefaultVpnServer = "ivpn-central.sun.com";
        protected final int DefaultVpnPort = 80;
        protected boolean validHost = false;
        protected String SwanHost = "sun-ds";
        protected  String SwanHosts;
        protected String VpnServer;
        
        public NetStatThread(NetStatUI UI) {
            
            ui=UI;
            LocalHostBlink = new Blink( this.ui.LocalHostButton );
            GatewayBlink = new Blink( ui.GatewayButton );
            InternetBlink = new Blink( this.ui.InternetButton );
            VpnGatewayBlink = new Blink( this.ui.VpnGatewayButton );
            SwanBlink = new Blink( this.ui.SwanButton );
            SwanHosts = ui.getSwanHosts();
            
        }
        
        public String[] getSwanHosts(){
            String hosts = ui.getSwanHosts();
            // delimiter = :
            if ( hosts.length() < 1 ) return new String[] { "sun-ds", "sun-ds.sun.com" };
            return hosts.split(":");
        }
        
        public String getHostName(Hashtable configInfo) {
            String hostname = "";
            return hostname;
            
        }
       
        public Hashtable getAdapters(Hashtable configInfo) {
            
            Hashtable adapters = new Hashtable();
            Enumeration en = configInfo.keys();
            while ( en.hasMoreElements() ){
                String key = en.nextElement().toString();
                if ( key.startsWith(HeadingFields.LanPrefix) ){
                    Object val = configInfo.get( key );
                    if ( val instanceof Hashtable ){
                        adapters.put(key, val);
                    }
                }
            }
            return adapters;
        }
        
        public boolean hasDefaultGateway(Hashtable adapter) {
            // key points to hashtable of info
            
            return false;
        }
        
        public void getConfig() {
            
        }
        
        public void run() {
            
        }
        
        
        public void resetButtons() {
            
            ui.Cancel.setEnabled(false);
            ui.Check.setEnabled(true);
        }
        
        public boolean stopThread() {
            boolean status = false;
            if ( ui.CancelNetStat == true ){
                ui.NetStatStopped = true;
                ui.Check.setEnabled(true);
                ui.Cancel.setEnabled(false);
                // ui.hideNetworkObjects();
                ui.printToLog("Network check cancelled.\n" );
                status = true;
            }
            return status;
        }
        
        
        
        public boolean checkInternet() {
            // ping or socket connect to hosts
            //boolean canConnect = false;
            String msg = "";
            int successCount = 0;
            
            int maxRetries = 5;
            long sleepInterval = 10000 / maxRetries;
            
            String[] hosts = InternetHosts.split(",");
            
            for ( int i=0; i<hosts.length; i++ ){
                final String currentHost = hosts[i];
                
                // set timer for each connection attempt
                class URLThread extends Thread{
                    NetStatUI.NetStatThread netstatT;
                    public URLThread( NetStatUI.NetStatThread th ){
                        netstatT = th;
                    }
                    
                    public void run(){
                        
                        
                        try{
                            URL InternetURL = new URL( currentHost );
                            InternetURL.openStream();
                            System.out.println( "Connection to " + currentHost + " OK." );
                            netstatT.validHost = true;
                            return;
                            
                        } catch ( MalformedURLException mue ){
                            netstatT.validHost = false;
                            return;
                        }catch ( IOException ie ){
                            netstatT.validHost = false;
                            return;
                        }
                        
                        //System.out.println( "End of URLThread.run(), Host " + currentHost + " is validHost == " + validHost );
                        
                    }
                    public boolean isValidHost(){
                        return netstatT.validHost;
                    }
                }
                
                URLThread urlt = new URLThread(this);
                urlt.start();
                
                for ( int j=0; j<maxRetries; j++ ){
                    try{
                        yield();
                        sleep( sleepInterval );
                    }catch ( java.lang.InterruptedException x ){
                    }
                    if (  this.validHost ){
                        
                        msg = new String( "HTTP connectivity to " + hosts[i] +  " OK" );
                        printToLog(msg);
                        //canConnect = true;
                        successCount++;
                        urlt = null;
                        break;
                    }
                    
                }
                urlt = null;
                if (  this.validHost == false ){
                    msg = new String( "No HTTP connectivity to " + hosts[i]  );
                    printToLog(msg);
                }
                this.validHost = false;
            }
            if ( successCount > 0 ) return true;
            return false;
            
        }
        
        public boolean checkVpn() {
            // socket 80 vpn gateways
            String[] vpnServers = { "ivpn-central.sun.com", "ivpn-sfbay.sun.com", "ivpn-east.sun.com",
            "ivpn-aus.sun.com", "ivpn-holland.sun.com", "ivpn-japan.sun.com", "ivpn-singapore.sun.com",
            "ivpn-prc.sun.com", "ivpn-norway.sun.com", "ivpn-uk.sun.com" };
            Object response = JOptionPane.showInputDialog(new JFrame(), "Select a vpn server to check:", "Select a vpn server", JOptionPane.QUESTION_MESSAGE, null, vpnServers, "ivpn-central.sun.com" );
            
            String msg = "";
            if ( response instanceof String ){
                this.VpnServer = (String)response;
            } else {
                // cancel check
                ui.cancelNetStat(null);
                return false;
            }
            int DefaultVpnPort = 80;
            try {
                InetAddress addr = InetAddress.getByName(VpnServer);
                SocketAddress sockaddr = new InetSocketAddress(addr, DefaultVpnPort);
                Socket sock = new Socket();
                int timeoutMs = 10000;
                sock.connect(sockaddr, timeoutMs);
                Socket VpnSocket = new Socket( VpnServer, DefaultVpnPort );
                msg = new String( "Connection to " + VpnServer + " at port " + DefaultVpnPort + " OK" );
                printToLog(msg);
                return true;
                
            } catch (SocketTimeoutException e) {
                msg = new String( "No Connection to " + VpnServer + " at port " + DefaultVpnPort  );
                printToLog(msg);
                //msg = e.getLocalizedMessage();
                //printToLog(msg);
                return false;
            } catch ( UnknownHostException uh ){
                msg = new String( "No Connection to " + VpnServer + " at port " + DefaultVpnPort  );
                printToLog(msg);
                //msg = uh.getLocalizedMessage();
                //printToLog(msg);
                return false;
            } catch ( IOException io ){
                msg = new String( "No Connection to " + VpnServer + " at port " + DefaultVpnPort  );
                printToLog(msg);
                //msg = io.getMessage();
                //printToLog(msg);
                return false;
            }
            
        }
        
        
        public boolean checkSwan() {
            return false;
        }
        
        public boolean checkGateway(String gw) {
            return false;
        }
        
        public boolean checkLocalHost() {
            return false;
            
        }
        
        public boolean checkConnection(String type) {
            return true;
        }
        
        public String getVpnServer() {
            return this.VpnServer;
        }
        
    }
    
    // end of netstatthread //
    
    
    private void setColors( Color c ){
        this.LocalHostButton.setBackground(c);
        this.SwanButton.setBackground(c);
        this.GatewayButton.setBackground(c);
        this.InternetButton.setBackground(c);
        this.VpnGatewayButton.setBackground(c);
        
    }
    
    public void setText(){
        String txt = "";
        this.LocalHostButton.setText(txt);
        this.SwanButton.setText(txt);
        this.GatewayButton.setText(txt);
        this.InternetButton.setText(txt);
        this.VpnGatewayButton.setText(txt);
    }
    
    private void checkConnection(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkConnection
        // Add your handling code here:
        //hideNetworkObjects();
        
        if ( this.LogWin instanceof NetCheckLogWin ){
            this.LogWin.clearText();
        }
        setColors(defaultButtonColor);
        // stop blinking
        if ( this.NetStatT instanceof NetStatUI.NetStatThread ){
            this.NetStatT.LocalHostBlink.stopBlinking();
            this.NetStatT.SwanBlink.stopBlinking();
            this.NetStatT.GatewayBlink.stopBlinking();
            this.NetStatT.InternetBlink.stopBlinking();
            this.NetStatT.VpnGatewayBlink.stopBlinking();
            
        }
        
        // LogWindow.setText(null);
        //setColors( Color.lightGray );
        setText();
        //this.LocalHostButton.setBackground(Color.green);
        this.Cancel.setEnabled(true);
        this.CancelNetStat = false;
        this.Check.setEnabled(false);
        if ( OSType.equalsIgnoreCase("windows xp") || OSType.equalsIgnoreCase("windows 2000") ){
            // set up windows-specific structures
            NetStatT = new WinNetStatThread(this);
            NetStatT.start();
        } else if (  OSType.equalsIgnoreCase("linux")  ){
            // set up linux-specific structures
            LinuxNetStatThread linuxThread = new LinuxNetStatThread(this);
            linuxThread.start();
        } else if (  OSType.equalsIgnoreCase("sunos") ){
            // set up solaris-specific structures
            SolarisNetStatThread solarisThread = new SolarisNetStatThread(this);
            solarisThread.start();
            
        } else {
            JOptionPane.showMessageDialog(null, "This program does not run on" + OSType );
            System.exit(0);
        }
        
        
        
    }//GEN-LAST:event_checkConnection
    
    public void centerWindow(JFrame win){
        java.awt.Dimension dim = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        int width = win.getWidth();
        int height = win.getHeight();
        
        int x = ( dim.width/2 - width/2 );
        int y = ( dim.height/2 - height/2 );
        
        win.setLocation( x, y );
        
    }
    
    public void centerWindow(JFrame win, int xy_off ){
        java.awt.Dimension dim = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        int width = win.getWidth();
        int height = win.getHeight();
        int x = ( dim.width/2 - width/2 );
        int y = ( dim.height/2 - height/2 );
        
        x += xy_off;
        y += xy_off;
        
        if ( x < 0 ) x = 0;
        if ( y < 0 ) y = 0;
        
        win.setLocation( x, y );
        
    }
    
    public void centerWindow(JFrame win, int x_off, int y_off ){
        java.awt.Dimension dim = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        
        
        int width = win.getWidth();
        int height = win.getHeight();
        
        int x = ( dim.width/2 - width/2 );
        int y = ( dim.height/2 - height/2 );
        
        // x,y are center of screen
        if ( x < 0 ) x = 0;
        if ( y < 0 ) y = 0;
        
        java.awt.Point mainWin = this.getLocationOnScreen();
        double mainX = mainWin.getX();
        double mainY = mainWin.getY();
        int mainWidth = getWidth();
        int mainHeight = getHeight();
        
        x = (int)mainX + x_off;
        y = (int)mainY + y_off;
        
        if ( x < 0 ) x = 0;
        if ( x > dim.width ) x = dim.width;
        if ( y < 0 ) y = 0;
        if ( y > dim.height ) y = dim.height;
        
        
        win.setLocation( x,y );
        
    }
    
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        NetStatUI ui = new NetStatUI();
        ui.centerWindow(ui, -250);
        ui.show();
    }
    public String getSwanHosts() {
        return this.SwanHosts;
    }
    
    public String getInternetHosts() {
        return this.InternetHosts;
    }
    
    public String getDefaultSwanHosts() {
        return this.DefaultSwanHosts;
    }
    
    public String getDefaultInternetHosts() {
        return this.DefaultInternetHosts;
    }
    protected void setSwanHosts( Vector hosts ){
        // colon delimited
        int indexLen = hosts.size();
        if ( indexLen < 1 ) {
            SwanHosts = "";
            return;
        }
        StringBuffer buf = new StringBuffer();
        for ( Enumeration en = hosts.elements(); en.hasMoreElements();  ){
            buf.append((String)en.nextElement());
            if ( en.hasMoreElements() ){
                // add delimiter
                buf.append( "," );
            }
        }
        SwanHosts = buf.toString();
    }
    
    protected void setInternetHosts( Vector hosts ){
        int indexLen = hosts.size();
        if ( indexLen < 1 ){
            InternetHosts = "";
            return;
        }
        StringBuffer buf = new StringBuffer();
        for ( Enumeration en = hosts.elements(); en.hasMoreElements();  ){
            buf.append((String)en.nextElement());
            if ( en.hasMoreElements() ){
                // add delimiter
                buf.append( "," );
            }
        }
        InternetHosts = buf.toString();
    }
    
    public Image getMinimizeImage(){
        return this.minimizeIcon.getImage();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JButton Cancel;
    protected javax.swing.JButton Check;
    protected javax.swing.JButton Exit;
    protected javax.swing.JPanel FooterPanel;
    protected javax.swing.JButton GatewayButton;
    protected javax.swing.JLabel GatewayLabel;
    protected javax.swing.JPanel HeaderPanel;
    protected javax.swing.JButton Help;
    protected javax.swing.JLabel HostLabel;
    protected javax.swing.JButton InternetButton;
    protected javax.swing.JLabel InternetLabel;
    protected javax.swing.JPanel LeftFillerPanel;
    protected javax.swing.JButton LocalHostButton;
    protected javax.swing.JButton Prefs;
    protected javax.swing.JPanel RightFillerPanel;
    protected javax.swing.JButton ShowLog;
    protected javax.swing.JButton SwanButton;
    protected javax.swing.JLabel SwanLabel;
    protected javax.swing.JLabel VPNLabel;
    protected javax.swing.JButton VpnGatewayButton;
    protected javax.swing.JPanel displayPanel;
    protected javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    protected NetStatThread NetStatT;
    protected HeadingFields InterfaceHeadings;
    protected boolean CancelNetStat = false ;
    protected boolean NetStatStopped = true;
    protected String OSType = null;
    public static java.awt.Font DefaultFont = new java.awt.Font("Dialog", 1, 10);
    protected String VpnServer;
    protected String InternetHosts;
    protected String SwanHosts;
    protected String PrefsFile = "";
    protected EditPrefs PrefWin;
    protected static final String DefaultSwanHosts =  "sun-ds,sun-ds.sun.com";
    protected static final String DefaultInternetHosts = "http://www.sun.com,http://www.java.sun.com";
    protected NetStatHelpWin HelpWin;
    public final ImageIcon minimizeIcon =  new ImageIcon( getClass().getResource("/netstatus.png" ));
    protected NetCheckLogWin LogWin;
    protected static final Color defaultButtonColor = new Color ( 204,204,255 );
    
}

