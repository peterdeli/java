/*
 * ImportProfile.java
 *
 * Created on December 10, 2003, 9:18 PM
 */

/**
 *
 * @author  pdel
 */

import java.io.File;
import javax.swing.*;
import java.util.*;
import java.awt.event.*;
import java.awt.*;


public class ImportProfile extends javax.swing.JFrame implements ComponentListener {
    
    /** Creates new form ImportProfile */
    public ImportProfile(java.awt.Frame parent, boolean modal) {
        //super(parent, modal);
        initComponents();
        addComponentListener(this);
        getSelection();
        exit();
    }
    
    public ImportProfile( vpn3k GUI ) {
        
        //super(new java.awt.Frame(), true );
        UI=GUI;
        initComponents();
        addComponentListener(this);
        //getFocus();
        getSelection();
        exit();
    }
    
    public void getFocus(){
        setFocusTraversalKeysEnabled(true);
        setFocusableWindowState(true);
        setFocusable(true);
        setVisible(true);
        requestFocusInWindow();
    }
    class ProfileFilter extends javax.swing.filechooser.FileFilter{
        
        public boolean accept(File f) {
            
            if (  f.isDirectory() ){
                return true;
            } else {
                File parent = f.getParentFile();
                if ( f.getName().endsWith( ".pcf" ) && parent.canRead() ) {
                    return true;
                }
                return false;
            }
        }
        
        public String getDescription() {
            return "Cisco VPN Profile Files (*.pcf)";
        }
    }
    
    protected void getSelection(){
        int state = 0;
        jFileChooser1.setFileFilter(new ProfileFilter());
        state=jFileChooser1.showDialog(this,  "Import" );
        jFileChooser1.setApproveButtonMnemonic('i');
        //state = jFileChooser1.showOpenDialog(null);
        File choice = jFileChooser1.getSelectedFile();
        
        
        //String profileName = choice.getName().split(".", 2)[0];
        if ( this.UI instanceof vpn3k ){
            if ( choice != null && state == JFileChooser.APPROVE_OPTION ){
                int doIt = JOptionPane.showConfirmDialog(  null,
                new String( "Importing " + choice.getPath()),
                "Confirm Import", JOptionPane.OK_CANCEL_OPTION  );
                if ( doIt  != 0 ){
                    return;
                    
                }
                Hashtable ht = this.UI.parseConfig(choice);
                if ( ht instanceof Hashtable ){
                    
                    String profileName = choice.getName().split("\\.", 2)[0];
                    if ( this.UI.accountExists(profileName) ){
                        JOptionPane.showMessageDialog(null, new String( "Profile Name " + profileName + " already taken") );
                        return;
                    }
                    // change existing path to profiles path
                    String newPath = new String( this.UI.ProfilesDir + this.UI.pathDelim + choice.getName() );
                    ht.put(ProfileFields.Filename, newPath );
                    this.UI.addAccount(profileName, ht );
                    this.UI.writeProfileFile(profileName);
                    JOptionPane.showMessageDialog(null, "Import complete" );
                    
                } else {
                    JOptionPane.showMessageDialog(null,"Error importing File" );
                    return;
                }
            }else if ( state == JFileChooser.CANCEL_OPTION ) {
                //JOptionPane.showMessageDialog(null, "Import Cancelled" );
                return;
                
            }
        }
        return;
    }
    
    protected void exit(){
        dispose();
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jFileChooser1 = new javax.swing.JFileChooser();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });
        jFileChooser1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                getKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                getKeyReleased(evt);
            }
        });

        getContentPane().add(jFileChooser1, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents
    
    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        // Add your handling code here:
//        System.out.println( "Something happened: " + evt.getActionCommand() );
    }//GEN-LAST:event_jFileChooser1ActionPerformed
    
    private void getKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_getKeyPressed
        // Add your handling code here:
        System.out.println( "key pressed " + evt.getKeyChar() );
        if ( evt.getKeyChar() == 'C' && evt.getModifiers() == KeyEvent.ALT_DOWN_MASK ){
            closeDialog(null);
        } else if (  evt.getKeyChar() == 'O' && evt.getModifiers() == KeyEvent.ALT_DOWN_MASK ){
            
        }
    }//GEN-LAST:event_getKeyPressed
    
    private void getKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_getKeyReleased
        // Add your handling code here:
        if ( evt.getKeyChar() == 'C' && evt.getModifiers() == KeyEvent.ALT_DOWN_MASK ){
            closeDialog(null);
        } else if (  evt.getKeyChar() == 'O' && evt.getModifiers() == KeyEvent.ALT_DOWN_MASK ){
            
        }
        
    }//GEN-LAST:event_getKeyReleased
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //new ImportProfile(new javax.swing.JFrame(), true).show();
        new ImportProfile(new javax.swing.JFrame(), true);
        
    }
    
    
    
    public void componentHidden(ComponentEvent e) {
    }
    
    public void componentMoved(ComponentEvent e) {
    }
    
    public void componentResized(ComponentEvent e) {
    }
    
    public void componentShown(ComponentEvent e) {
        getFocus();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables
    protected vpn3k UI;
}

