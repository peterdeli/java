proc set_account {value } {

	# display active account 

	global menubar_widget
	global active_account
	global color_array
	global accounts
	global account_list
	global acct_width

	if { [string length $active_account] > 0 && \
			$accounts($active_account,status) == "DELETED" } {

		.acct_label configure -text "Active Account:"
		.namef.name_r configure -text ""

		.uidf.uid_r delete 0 end 
		.uidf.uid_r configure -state disabled 
		.passwdf.passwd_r configure -state disabled 
		.numberf.number_r configure -text ""
		#.authtypef.authtype_r configure -text ""
		.connect configure -state disabled
		return
	}

	if { [string length $active_account] > 0 } {

		.acct_label configure -text \
		"Active Account: $accounts($active_account,name)" -width [expr \
		[string length "Active Account: $accounts($active_account,name)"] + 0]

		set namelabel_width [expr [string length $accounts($active_account,name)] + 0]

 		if { [.namef.name_r cget -width] < $namelabel_width } { 
			puts "Increasing width to $namelabel_width"
 			.namef.name_r configure -width $namelabel_width 
 			.uidf.uid_r configure -width $namelabel_width
 			.passwdf.passwd_r configure -width $namelabel_width
 			.numberf.number_r configure -width $namelabel_width
 			#.authtypef.authtype_r configure -width $namelabel_width
 		} else {
			puts "Setting width to default $acct_width"
 			.namef.name_r configure -width $acct_width
 			.uidf.uid_r configure -width $acct_width
 			.passwdf.passwd_r configure -width $acct_width 
 			.numberf.number_r configure -width $acct_width
 			#.authtypef.authtype_r configure -width $acct_width
 		}

		.namef.name_r configure -text $accounts($active_account,name)
		pack .namef.name_r -side left -fill x -expand 1

		.uidf.uid_r delete 0 end 
		.uidf.uid_r insert 0 "$accounts($active_account,uid)"
		pack .uidf.uid_r -side left -fill x -expand 1 

		if { $accounts($active_account,authtype) == "tokencard" } {
			.uidf.uid_r configure -state normal 
			.passwdf.passwd_r delete 0 end 
			.passwdf.passwd_r configure -bg lightBlue 
			.passwdf.passwd_r insert 0 "- tokencard challenge -"
			.passwdf.passwd_r configure -state disabled 
			pack .passwdf.passwd_l .passwdf.passwd_r -side right  
			#pack .passwdf.passwd_r -side right -pady 3 \
			# -before .passwdf.passwd_l
		} else {
			.uidf.uid_r configure -state normal 
			.passwdf.passwd_r configure -bg lightYellow 
			.passwdf.passwd_r configure -state normal -show *
			.passwdf.passwd_r delete 0 end 
			.passwdf.passwd_r insert 0 "$accounts($active_account,passwd)" 
			pack .passwdf.passwd_l .passwdf.passwd_r -side right  
		}

		.numberf.number_r configure -text "$accounts($active_account,number)"
		pack .numberf.number_r -side left -fill x -expand 1  

		#.authtypef.authtype_r configure -text "$accounts($active_account,authtype)"

		if { [info exists active_account] } {
			.connect configure -state normal
		} else {
			.connect configure -state disabled
		}
	} else {
		.acct_label configure -text "Active Account:"
		.namef.name_r configure -text ""

		.uidf.uid_r delete 0 end 
		.passwdf.passwd_r delete 0 end 
		.numberf.number_r configure -text ""
		#.authtypef.authtype_r configure -text ""
		.connect configure -state disabled
	}

	# reset active key
	foreach acct $account_list {

		if { $acct == $active_account } {
			puts "Setting account $acct to 'active' status"
			set accounts($active_account,status) "active"
		} else {
			puts "Setting account $acct to 'inactive' status"
			set accounts($acct,status) "inactive"
		}
	}
	pack .mid -padx 10
}
