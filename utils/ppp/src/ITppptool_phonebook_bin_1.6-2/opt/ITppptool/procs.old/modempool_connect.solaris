proc modempool_connect { } {

	puts "proc modempool_connect { } "

	global ppp_interface serial_port ip_address

	global connection_type
	global connection_state 

	global 	accounts account_list active_account baud_rate \
	env flow_control init_string ip_enabled \
	log_file log_messages message modem_port \
	nat_transparency_mode network_interface \
	password phone_number \
	port port_speed spawn_id tokencard_response username \
	baud_rate pppd_config_file username \
	tip_id pkghome ppp_settings challenge_entered \
	des_response seconds_remaining link_disconnected \
	port_id start_pppd remote_ip_address mtu ip_up_file
	
  set connection_type "tip"
	set pppd_started "false"
	set link_disconnected "false" 
	set mtu 0
	set remote_ip_address "0.0.0.0"

	# remote ip_up_file
	#puts "removing $ip_up_file"

	catch { exec rm $ip_up_file }

	#set ppp_settings(init_string) "atz" 
	#set ppp_settings(connect_string) ""
	#set ppp_settings(port_speed) 38400
	#set ppp_settings(flow_control) hardware
	#set ppp_settings(modem_port) /dev/term/b
	#set ppp_settings(ppp_options) "" 

	set phone_number $accounts($active_account,number)
	set baud_rate $ppp_settings(port_speed) 
	set pppd_config_file "$env(HOME)/.ppptool/connect.script"
	set port $ppp_settings(modem_port) 

	#set username $accounts($active_account,uid) 
	set username [.uidf.uid_r get] 
	if { $username != $accounts($active_account,uid) } {
		set accounts($active_account,uid) $username
	}

	# don't need passwd field

	.passwdf.passwd_r configure -state disabled
	.connect configure -state normal

	puts "$phone_number $port $baud_rate $pppd_config_file $username"
	log_messages "$phone_number $port $baud_rate $pppd_config_file $username"

	set timeout 60
	# close any tip_id's in case
	catch { [exec pkill tip] }
	spawn tip "-$baud_rate" $port 
	log_messages "spawn tip -$baud_rate $port" 
	#set tip_id $spawn_id

	expect {

				"Authentication failed." {
					puts "Check User ID/Password"
					log_message $expect_out(buffer)
					log_message "Check User ID/Password"
					.footer.footer_r configure -text \
					"Authentication failed.\nCheck User ID/Password" -anchor w -justify left
					create_des_dialog
					exp_continue
				}
				"NO CARRIER" {
					set  connection_state "disconnected"
					sleep 5	
					log_message $expect_out(buffer)
					.connect configure -state normal -command connect
					puts "Modem connection dropped" 
				}
				"EOT" {
					puts "Received: $expect_out(buffer)"
					.connect configure -state normal -command connect
					#puts "Modem disconnected"
					exp_continue
				}
				"all ports busy" { 
					log_messages $expect_out(buffer)
					exp_send "~.\r"
				}	
				"NO DIAL TONE" { 
					log_messages $expect_out(buffer)
					.connect configure -state normal -command connect
					puts "NO DIAL TONE"
				}
				"connected" {
					log_messages $expect_out(buffer)
					# dial
					puts "Sending $phone_number"
					puts "******************************\n"
					puts "  Get your DES card ready"
					puts "  Enter your authorization #"
					puts "  Then get read to key in:"
					puts "  1.) Host number"
					puts "  2.) Challenge"
					puts "  Then enter the 'response' into the popup"
					puts "******************************"

					exp_send "atdt $phone_number\r"
					exp_continue
				}

				# auth
				Username: { 
					log_messages $expect_out(buffer)
					exp_send "$username\r" 
					exp_continue
				}
				password: { 
					log_messages $expect_out(buffer)
					exp_send "\r" 
					exp_continue
				}

				# des card challenge/response
				Challenge {
					log_messages $expect_out(buffer)
					exp_continue	
				}

				esponse?  { 
					log_message $expect_out(buffer)
					#puts "expect_out(0,string) = $expect_out(0,string)"
					#puts "expect_out(buffer) = $expect_out(buffer)"

					# pop up entry, display challenge
					#Challenge: 9 6024 Response? 0f68pc72


					if { [winfo exists .des_dialog] != 1 } {  return } 

					set host_challenge [lindex [split $expect_out(buffer)] 1]
					set secret [lindex [split $expect_out(buffer)] 2]

					.des_dialog.challenge_label configure -text \
					"Host: $host_challenge Challenge: $secret"

					puts "\nhost_challenge=$host_challenge"
					puts "secret=$secret"

					des_countdown

					tkwait variable challenge_entered
					if { [info exists des_response] ==1 } {
						puts "Challenge: $des_response"
						exp_send "$des_response\r" 
						set timeout -1
						exp_continue
					} else {
						puts "No challenge entered"
						log_message configure "Disconnected: No challenge entered"
						catch { exec pkill tip }
						sleep 2
						.connect configure -state normal -text "Connect" -command connect 
						return
					}
				}


				"Local command?" {

              if { [string first "Your IP address is" $expect_out(buffer)] != -1 } {
                  puts "\n**** Found IP: $expect_out(buffer) ****\n"
                  foreach line [split $expect_out(buffer) "\r\n"] {
                    puts "PPPD: $line"
                    if { [string first "Your IP" $line] != -1 } {
											set ip_address [lindex [split $line " 	"] 4]	
											set ip_address [string trimright $ip_address "."]
											puts "IP address: $ip_address"
											set mtu [lindex [split $line "  "] 7]
											puts "MTU: $mtu"
											.footer.footer_r configure -text "ppp Connected: $line" -font {times 10 bold} -justify left
                      break
                    }
                  }
              }

								log_message $expect_out(buffer)
								puts "exp_send /usr/bin/pppd debug lock crtscts defaultroute noipdefault noccp novj\r"
								exp_send "/usr/bin/pppd debug lock crtscts defaultroute noipdefault noccp novj\r"

							.connect configure -text "Disconnect" -command {
								catch { exec pkill pppd }
								disconnect "User disconnected"
								.footer.footer_r configure -text "User Disconnected"
							} 
							#puts "Reading ip-up output file"
							read_ip_up
							#ppp_interface serial_port ip_address remote_ip_address port_speed mtu
							.footer.footer_r configure -text \
							"Connected:\n\
							IP address: $ip_address\n\
							MTU: $mtu\n\
							Port Speed: $port_speed\n\
							Remote IP address: $remote_ip_address\n" \
							-font {times 10 bold} -justify left
							post_connect
							monitor_link
							#exp_continue
				}

				">" {
							log_messages $expect_out(buffer)
								exp_send "ppp\r" 
								sleep 1
								exp_send "~C"
								exp_continue

				}

				timeout { 
					log_messages $expect_out(buffer)
					puts "timeout: try again"
					#sleep 2
					#modempool_connect	
				}

				eof {
					log_messages $expect_out(buffer)
					puts "eof: Modem connection closed"
				}
		}

}


