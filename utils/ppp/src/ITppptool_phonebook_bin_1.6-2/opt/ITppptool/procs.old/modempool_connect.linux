proc modempool_connect { } {
	#puts "proc modempool_connect { } "
	global connection_type
	global connection_state 

	global 	accounts account_list active_account baud_rate \
	env flow_control init_string ip_enabled \
	log_file log_messages message modem_port \
	nat_transparency_mode network_interface \
	password phone_number \
	port port_speed spawn_id tokencard_response username \
	baud_rate pppd_config_file username \
	tip_id pkghome ppp_settings challenge_entered \
	des_response seconds_remaining link_disconnected \
	port_id start_pppd remote_ip_address mtu ip_up_file
	
  set connection_type "tip"
	set pppd_started "false"
	set link_disconnected "false" 
	set mtu 0
	set remote_ip_address "0.0.0.0"

	# remote ip_up_file
	#puts "removing $ip_up_file"
	catch { exec rm $ip_up_file }

	#set ppp_settings(init_string) "atz" 
	#set ppp_settings(connect_string) ""
	#set ppp_settings(port_speed) 38400
	#set ppp_settings(flow_control) hardware
	#set ppp_settings(modem_port) /dev/term/b
	#set ppp_settings(ppp_options) "" 

	set phone_number $accounts($active_account,number)
	set baud_rate $ppp_settings(port_speed) 
	set port_speed $ppp_settings(port_speed) 
	set pppd_config_file "$env(HOME)/.ppptool/connect.script"
	set port $ppp_settings(modem_port) 

	#set username $accounts($active_account,uid) 
	set username [.uidf.uid_r get] 
	if { $username != $accounts($active_account,uid) } {
		set accounts($active_account,uid) $username
	}
	# don't need passwd field
	.passwdf.passwd_r configure -state disabled
	.connect configure -text "Disconnect" -state disabled -command {
		disconnect "Disconnected by User" 
	} 
	.connect configure -state normal

	#puts "$phone_number $port $baud_rate $pppd_config_file $username"
	log_messages "$phone_number $port $baud_rate $pppd_config_file $username"


	if { [init_modem] != 0 } {
		return
	}
	#puts "Setting baud rate to $baud_rate"
	set error [catch { [system "stty -F $port -echoe -echo raw $baud_rate"] } err]
	if { $error != 1 } {
		puts "Error setting baud rate for modem on port $port"
	}

	set connection_state "connecting"
	.connect configure -text "Disconnect" -state normal -command { 
		disconnect "Disconnected by User" 
	}

	if { [info exists spawn_id] } {
		#puts "closing $spawn_id"
		catch { close $spawn_id }
	} 
	set timeout 90 
	if {	[catch { [spawn -noecho -open \
			 	[ open $ppp_settings(modem_port) "RDWR NONBLOCK" ]] } err]  != 1 } {
				#set connection_state "disconnected"
				log_messsage "error initializing modem: $err"
				return -1
	} else {
			# get model
			exp_send "$ppp_settings(init_string)\r" 
			log_user 0
			expect {
					 "OK"  { }
						"NO CARRIER" { }
						"BUSY" { } 
						"NO DIALTONE"	 { }
			}
			exp_send "ati3\r"
			expect {
				"OK" { 
						set model [lrange $expect_out(buffer) \
						[expr  [lsearch $expect_out(buffer) "ati3"] + 1] \
						[expr  [lsearch $expect_out(buffer) "OK"] - 1]] 
						puts "Modem_model: $model"
						log_message "Modem_model: $model"
					}
					"ERROR" {
						log_message "Unable to determine modem model"
						puts "Unable to determine modem model"
					}
			}
			exp_send "AT\r"
	}
	expect {
"Authentication failed." {
					puts "Check User ID/Password"
					log_message $expect_out(buffer)
					log_message "Check User ID/Password"
					.footer.footer_r configure -text \
					"Authentication failed.\nCheck User ID/Password" -anchor w -justify left
					create_des_dialog
					exp_continue
				}
				"NO CARRIER" {
					#set connection_state "disconnected"
					log_message $expect_out(buffer)
					#close_ppp_tunnel
					puts "Modem connection dropped" 
					.footer.footer_r configure -text "Modem connection dropped" 
					set connection_state "disconnected"
					log_message "Modem connection dropped" 
					#modempool_connect	
				}
				"EOT" {
					#set connection_state "disconnected"
					#puts "Received: $expect_out(buffer)"
					log_message "Modem disconnected"
					exp_continue
				}
				"all ports busy" { 
					#set connection_state "disconnected"
					log_message $expect_out(buffer)
					exp_send "~.\r"
					#catch { close $tip_id }
					#catch { close $spawn_id }
					#close_ppp_tunnel
					#sleep 10
					#modempool_connect	
				}	
				"NO DIAL TONE" { 
					#set connection_state "disconnected"
					log_message $expect_out(buffer)
					puts "NO DIAL TONE"
					.footer.footer_r configure -text "Modem connection closed" 
					 set connection_state "disconnected" 
					#close_ppp_tunnel
					#sleep 10
					#modempool_connect	
				}
				"OK" {
					log_message $expect_out(buffer)
					# dial
					#puts "Sending $phone_number"
					log_message "******************************\n"
					log_message "  Get your DES card ready"
					log_message "  Enter your authorization #"
					log_message "  Then get ready to key in:"
					log_message "  1.) Host number"
					log_message "  2.) Challenge"
					log_message "  Then enter the 'response' into the popup"
					log_message "******************************"

					puts "******************************\n"
					puts "  Get your DES card ready"
					puts "  Enter your authorization #"
					puts "  Then get ready to key in:"
					puts "  1.) Host number"
					puts "  2.) Challenge"
					puts "  Then enter the 'response' into the popup"
					puts "******************************"

					puts "Sending $phone_number to $spawn_id"

					exp_send "atdt $phone_number\r"
					exp_continue
				}

				# auth
				Username: { 
					log_message $expect_out(buffer)
					exp_send "$username\r" 
					exp_continue
				}
				password: { 
					log_message $expect_out(buffer)
					exp_send "\r" 
					exp_continue
				}

				# des card challenge/response
				Challenge {
					log_message $expect_out(buffer)
					exp_continue	
				}

				esponse?  { 
					log_message $expect_out(buffer)
					#puts "expect_out(0,string) = $expect_out(0,string)"
					#puts "expect_out(buffer) = $expect_out(buffer)"

					# pop up entry, display challenge
					#Challenge: 9 6024 Response? 0f68pc72


					if { [winfo exists .des_dialog] != 1 } {  return } 

					set host_challenge [lindex [split $expect_out(buffer)] 1]
					set secret [lindex [split $expect_out(buffer)] 2]

					.des_dialog.challenge_label configure -text \
					"Host: $host_challenge Challenge: $secret"

					puts "\nhost_challenge=$host_challenge"
					puts "secret=$secret"

					des_countdown
					.connect configure -text "Disconnect" -command {
							puts "Sending +++ to $spawn_id"
							exp_send "+++,ath0\r"
							exp_send "+++,ath0\r"
							exp_send "+++,ath0\r"
							exp_send "AT+++\r"
							exp_send "AT+++\r"
							exp_send "AT+++\r"
							exp_send "ATZ\r"
							puts "spawn id: $spawn_id"
							disconnect "User disconnected"
					} 

					tkwait variable challenge_entered

					if { [info exists des_response] == 1 } {
						puts "Challenge: $des_response"
						exp_send "$des_response\r" 
						set timeout -1
						#puts "Continuing .."
						exp_continue
					} else {
						puts "No challenge received"
						.footer.footer_r configure -text "Challenge Entry Interval Expired!\n"
						.connect configure -state disabled
						sleep 30
						disconnect "No challenge entered"
						exp_send "+++,ath0\r"
					}
				}

				"\}" {

						foreach line [split $expect_out(buffer) "\r\n"] {
							#puts "PPPD: $line"
							if { [string first "Your IP" $line] != -1 } {
								set ip_address [lindex [split $line " 	"] 4]	
								set ip_address [string trimright $ip_address "."]
								puts "IP address: $ip_address"
								set mtu [lindex [split $line "  "] 7]
								puts "MTU: $mtu"
								.footer.footer_r configure -text \
								"Connected:\nIP address: $ip_address\nMTU: $mtu" -font {times 10 bold} -justify left
								break
							}
						}
				
						if { $pppd_started == "false" } {	
							#puts "exec $start_pppd \
							$ppp_settings(modem_port) \
							$ppp_settings(port_speed)"
							eval exec $start_pppd \
							$ppp_settings(modem_port) \
							$ppp_settings(port_speed)
							set pppd_started "true" 
							#.footer.footer_r configure -text "pppd started" 
							.connect configure -text "Disconnect" -state normal -command {
								catch { exec pkill pppd }
								.connect configure -text "Connect" -command connect 
							} 
							#puts "Reading ip-up output file"
							read_ip_up
							#ppp_interface serial_port ip_address remote_ip_address port_speed mtu
							.footer.footer_r configure -text \
							"Connected:\n\
							IP address: $ip_address\n\
							MTU: $mtu\n\
							Port Speed: $port_speed\n\
							Remote IP address: $remote_ip_address\n" \
							-font {times 10 bold} -justify left
							post_connect
							monitor_link
						}

						log_message $expect_out(buffer)
						exp_continue
				}
				
				-re "(.*)>" {

							#puts "ppp prompt received"
							log_message $expect_out(buffer)
								#puts "Sending ppp"
								exp_send "ppp\r" 
								exp_continue
         }

				timeout {
					log_message $expect_out(buffer)
					#set connection_state "disconnected"
					#close_ppp_tunnel
					puts "timeout: try again"
					.footer.footer_r configure -text "Modem connection closed" 
					 set connection_state "disconnected" 
				}

				eof {
					#set connection_state "disconnected"
					log_message $expect_out(buffer)
					puts "eof: Modem connection closed"
					.footer.footer_r configure -text "Modem connection closed" 
					 set connection_state "disconnected" 
					#close_ppp_tunnel
				}
		}
	log_user 1
		return 0
}


