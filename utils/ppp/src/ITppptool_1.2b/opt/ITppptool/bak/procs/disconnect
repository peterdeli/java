proc disconnect { reason } {
	
	puts "proc disconnect $reason" 

	global accounts
	global active_account 
	global challenge_entered
	global des_response
	global seconds_remaining
	set seconds_remaining 30
	global connection_state link_disconnected
	set challenge_entered "false"
	global pppd_id pppd_pid tip_id

	global ppp_interface serial_port ip_address
	global connection_type ostype

	if { [info exists connection_state] == 1 && \
			[info exists link_disconnected] == 1 } {

		if { $connection_state == "disconnected" || \
				$connection_state == "disconnecting" || \
				$link_disconnected == "true" } {
			set_blinking_off
			set_all_bulbcolors "black" 
			return
		}

	} 

	set connection_state "disconnecting"

	puts "setting  link_disconnected  to true"
	set link_disconnected "true"

	# connection scripts
	# if connection_type == modempool
	if { $accounts($active_account,type) == "Sun_ModemPool" } {
		pre_disconnect
	}

	.connect configure -text "Connect" -command connect  -state disabled

	log_message "Disconnecting: $reason"
	.footer.footer_r configure -text "Disconnecting: $reason" -justify left
	catch { destroy .des_dialog }

	global backup_resolv
	global manage_resolv

	# restore resolv.conf
	if { $accounts($active_account,resolv) != "none"  } { 

		if { [info exists backup_resolv] == 1 } {
			if { [file exists $backup_resolv] == 1 } {
				puts "restoring file $backup_resolv"
				exec $manage_resolv restore $backup_resolv
			} 
		} 
	}

	puts "Terminating connection"
	.footer.footer_r configure -text  "Terminating connection, please wait .. "
	puts "close_pppd"
	close_pppd_$ostype


	# in case monitor_link still running
	#sleep 5 
	.connect configure -state normal 

	.footer.footer_r configure -text  "Connection closed"
	puts "disconnect done"
	# if connection_type == modempool
	if { $accounts($active_account,type) == "Sun_ModemPool" } {
		post_disconnect
	}

	set connection_state "disconnected"	
	set link_disconnected "true"
	set_blinking_off
	set_all_bulbcolors "black" 
}

