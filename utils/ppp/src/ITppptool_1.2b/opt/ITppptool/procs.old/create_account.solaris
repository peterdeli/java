proc create_account { } {
		#create window
		#name    Account1
		#uid     cbj
		#passwd  bongo
		#number  303 123-4567
		#domain  craig.com
		#ns1     123.456.789.000
		#ns2     987.654.321.000
		#authtype        DES challenge
		#defroute        1

		global accounts
		global account_list
		global account_keys
		global account_strings
		global create_authtype
		global create_defroute
		global create_resolv

		set top .new_account
		toplevel [set top] 
		global required_keys

		frame [set top].required_key_frame
		label [set top].required_key_frame.required_key -text "Required Fields indicated by '**'"
		pack [set top].required_key_frame.required_key
		pack [set top].required_key_frame -anchor n

		foreach key [set account_keys] {

			if { $key == "status" } { continue }
			if { $key == "resolv_file" } { continue }

			set value $account_strings($key)
			set [set key]_frame [set top].[set key]_frame

			frame [set [set key]_frame]

			puts "key = $key"
			if { $key == "authtype" } {
				# radio buttons for
				# pap chap challenge card

				radiobutton [set [set key]_frame].[set key]_radio_pap -text \
				"PAP" -variable create_authtype -value "pap" -width 12

				pack [set [set key]_frame].[set key]_radio_pap -side right

				radiobutton [set [set key]_frame].[set key]_radio_chap -text \
				"CHAP" -variable create_authtype -value "chap" -width 12
				pack [set [set key]_frame].[set key]_radio_chap -side right

				radiobutton [set [set key]_frame].[set key]_radio_token -text \
				"Token Card" -variable create_authtype -value "tokencard" -width 12
				pack [set [set key]_frame].[set key]_radio_token -side right

				label [set [set key]_frame].[set key]_label -text "** $value" 
				pack [set [set key]_frame].[set key]_label -side right
				set create_authtype ""

			} elseif { $key == "defroute" } {

				set create_defroute 0
				checkbutton [set [set key]_frame].[set key]_check \
				-text "Set default route" -anchor w -onvalue "1" \
				-offvalue "0" -variable create_defroute -width 42 

				pack [set [set key]_frame].[set key]_check -side right

				label [set [set key]_frame].[set key]_label -text $value 
				pack [set [set key]_frame].[set key]_label -side right

			} elseif { $key == "resolv" } {

				checkbutton [set [set key]_frame].[set key]_check \
				-text "Create /etc/resolv.conf from DNS settings" -anchor w -onvalue "1" \
				-offvalue "0" -variable create_resolv -width 42 

				pack [set [set key]_frame].[set key]_check -side right

				label [set [set key]_frame].[set key]_label -text $value 
				pack [set [set key]_frame].[set key]_label -side right

			} else {
				entry [set [set key]_frame].[set key]_entry -width 45
				pack [set [set key]_frame].[set key]_entry -side right
				if { [lsearch $required_keys $key] != -1 } {
					label [set [set key]_frame].[set key]_label -text "** $value" 
				} else {
					label [set [set key]_frame].[set key]_label -text $value 
				}
				pack [set [set key]_frame].[set key]_label -side right
				pack [set [set key]_frame].[set key]_entry -anchor w
			}

			pack [set [set key]_frame] -fill x -expand 1 -pady 5
		}

		frame [set top].button_frame

		button [set top].button_frame.save -text "Create Account" -command {

			# get all entries
			# add to accounts array and account_list
			global new_account
			global create_authtype
			global create_defroute
			global create_resolv
			
			# check if name is already taken
			set new_account_name [list [.new_account.name_frame.name_entry get]]

			if { [lsearch $account_list $new_account_name] != -1 } {
				tk_messageBox -type ok -icon error -title "Duplicate Account Name" \
				-message  "Account name $new_account_name already exists"
				return
			} elseif { $new_account_name == "" } {
				tk_messageBox -type ok -icon error -title "Missing Account Name" \
				-message  "Please Enter an Account Name"
				return

			} elseif { [string length $new_account_name] < 1 } {
				tk_messageBox -type ok -icon error -title "Missing Account Name" \
				-message  "Please Enter an Account Name"
				return

			}


			set account_name {}
			foreach key [set account_keys] {
					puts "-------> Key $key" 

					if { $key == "status" } { continue }
					if { $key == "resolv_file" } { continue }

					# get checkbuttons separate from entry boxes
					if { $key == "authtype" } {
						
						if { [string length $create_authtype] < 1 } {
							tk_messageBox -type ok -icon error -title \
							"$account_strings($key) Required" -message  \
							"Please Enter $account_strings($key)"
							return
						} else {
							set new_account($key) $create_authtype 
						}

					} elseif { $key == "defroute" } {
						set new_account($key) $create_defroute
					} elseif { $key == "resolv" } {
						set new_account($key) $create_resolv
					} else {

								# entry boxes
								set [set key]_frame .new_account.[set key]_frame
								set key_value [[set [set key]_frame].[set key]_entry get]
								puts "----> key: $key key_value: $key_value" 
								set new_account($key) $key_value 

								# required fields
								#account_strings(name) "Account Name:"
								#account_strings(uid) "User ID:"
								#account_strings(passwd) "Password:"
								#account_strings(number) "Phone Number:"
								#account_strings(domain) "DNS Domain Name:"
								#account_strings(ns1) "Account Nameserver #1:"
								#account_strings(ns2) "Account Nameserver #2:"
								#account_strings(authtype) "Authentication Type:"
								#account_strings(defroute) "Default Route:"

								if { $key == "name" } { 
									set account_name  [list $key_value] 
									set account_string $key_value
								}


								if { [lsearch $required_keys $key] != -1 && [string length $key_value] < 1 } {
										
										tk_messageBox -type ok -icon error -title \
										"$account_strings($key) Required" -message  \
										"Please Enter $account_strings($key)"
										return

								}

								
					}
						
			}
					lappend account_list $account_name
					
					# add to accounts
					puts "account name: $account_name"
					puts "account string: $account_string"
					set accounts($account_name,name) $account_string

					foreach { key value } [array get new_account] {
						puts "accounts($account_name,$key) = $value" 
						set accounts($account_name,$key) $value 
					}

					# create resolv.conf name for this account
					set resolv_name "[set ppp_dir]/resolv.conf.[RandomRange 1000]" 
					set accounts($account_name,resolv_file) $resolv_name
					puts "resolv.conf file is $accounts($account_name,resolv_file)"
					# write a resolv.conf file to the file
					write_resolv_file $accounts($account_name,name)	

					# set status
					set accounts($account_name,status) inactive 

					# add to Accounts menu and acct manager
					add_account_menu $account_name "END"
					.account_manager_win.account_list insert end "$accounts($account_name,name)"

				destroy .new_account 
		}

		button [set top].button_frame.close -text "Close" -command {
				destroy .new_account 
		}

		pack .new_account.button_frame.close -side right 
		pack .new_account.button_frame.save -side left 
		pack .new_account.button_frame -side bottom -pady 10 

}

